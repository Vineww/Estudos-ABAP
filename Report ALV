REPORT Z_FATURA_01.

*&----------------------------------------------------------------------*
*& Report  ZSDB007
*&
*&----------------------------------------------------------------------*
*&----------------------------------------------------------------------*
* Empresa    : SABB                                                     *
* Autor      : Adriano Miguel - FH Consulting                           *
* Data       : 18/07/2011                                               *
* Descrição  : Relatorio de notas fiscais                               *
*------------------- ---------------------------------------------------*
* Data Modif  Autor  Descriçao                                Request   *
*-----------------------------------------------------------------------*
* XX/XX/XXXX                                                  DEVKXXXXXX*
*-----------------------------------------------------------------------*
*-----------------------------------------------------------------------*
* NNNN - DD/MM/YY  NOME AUTOR - EMPRESA
*        CHANGE REQUEST:
*        MOTIVO:
*-----------------------------------------------------------------------*
* 0001 - 05/01/12  NOME Luciano Soares - FH consulting.
*       CHANGE REQUEST:
*       MOTIVO: Correção de performance / Incluir drill down Doc.contabil
*-----------------------------------------------------------------------*
* 0002 - 06/01/12  NOME Luciano Soares - FH consulting.
*       CHANGE REQUEST:
*       MOTIVO: Incluir emissão por hierarquia.
*-----------------------------------------------------------------------*
* 0003 - 06/01/12  NOME Luciano Soares - FH consulting.
*       CHANGE REQUEST:
*       MOTIVO: Inclusão da coluna setor de atividade.
*-----------------------------------------------------------------------*
* 0004 - 10/02/12  NOME Luciano Soares - FH consulting.
*       CHANGE REQUEST:
*       MOTIVO: Ajuste no filtro de tela empresa e Canal de distribuição
*               e Organização de vendas.
*-----------------------------------------------------------------------*
*REPORT  zsdb007.
*-----------------------------------------------------------------------*
* Types                                                                 *
*-----------------------------------------------------------------------*
TYPES: BEGIN OF ty_vendedor,
         kunnr TYPE kna1-kunnr,
         name1 TYPE kna1-name1,
       END OF ty_vendedor,

       BEGIN OF ty_tpdoc,
         fkart TYPE tvfkt-fkart,
         vtext TYPE tvfkt-fkart,
       END OF ty_tpdoc,

       BEGIN OF ty_t005s,
*         land1  TYPE t005s-land1,
         bland TYPE t005s-bland,
       END OF ty_t005s,

       BEGIN OF ty_doc,
         docnum TYPE j_1bnfdoc-docnum,
         nftype TYPE j_1bnfdoc-nftype,
         direct TYPE j_1bnfdoc-direct,
         docdat TYPE j_1bnfdoc-docdat,
         pstdat TYPE j_1bnfdoc-pstdat,
         series TYPE j_1bnfdoc-series,
         nfnum  TYPE j_1bnfdoc-nfnum,
         waerk  TYPE j_1bnfdoc-waerk,
         gjahr  TYPE j_1bnfdoc-gjahr,
         bukrs  TYPE j_1bnfdoc-bukrs,
         branch TYPE j_1bnfdoc-branch,
         parid  TYPE j_1bnfdoc-parid,
         cancel TYPE j_1bnfdoc-cancel,
         candat TYPE j_1bnfdoc-candat,
*        name1   TYPE kna1-name1,
*        ort01   TYPE kna1-ort01,
*        cgc     TYPE kna1-stcd2,
         nfenum TYPE j_1bnfdoc-nfenum,
         inco1  TYPE j_1bnfdoc-inco1,
       END OF ty_doc,

       BEGIN OF ty_lin,
         docnum TYPE j_1bnflin-docnum,
         itmnum TYPE j_1bnflin-itmnum,
         werks  TYPE j_1bnflin-werks,
         docref TYPE j_1bnflin-docref,
         matnr  TYPE j_1bnflin-matnr,
         maktx  TYPE j_1bnflin-maktx,
         menge  TYPE j_1bnflin-menge,
         meins  TYPE j_1bnflin-meins,
         matkl  TYPE j_1bnflin-matkl,
         cfop   TYPE j_1bnflin-cfop,
         refkey TYPE j_1bnflin-refkey,
         netwr  TYPE j_1bnflin-netwr,
         nbm    TYPE j_1bnflin-nbm,
         netdis TYPE j_1bnflin-netdis,
       END OF ty_lin,

       BEGIN OF ty_stx,
         docnum TYPE j_1bdocnum,
         itmnum TYPE j_1bitmnum,
         taxtyp TYPE j_1btaxtyp,
         base   TYPE j_1bbase,
         rate   TYPE j_1btxrate,
         taxval TYPE j_1btaxval,
       END OF ty_stx,

       BEGIN OF ty_vttk,
         tknum TYPE vttk-tknum,
*        daten TYPE vttk-daten,
         dpten TYPE vttk-dpten,
         datbg TYPE vttk-datbg,
         tdlnr TYPE vttk-tdlnr,
       END OF ty_vttk,

       BEGIN OF ty_vttp,
         tknum TYPE vttp-tknum,
         tpnum TYPE tpnum,
         vbeln TYPE vbeln_vl,
       END OF ty_vttp,

       BEGIN OF ty_vbkd,
         vbeln TYPE vbkd-vbeln,
         posnr TYPE vbkd-posnr,
         bstkd TYPE vbkd-bstkd,
         bsark TYPE vbkd-bsark,
       END OF ty_vbkd,

       BEGIN OF ty_vbrk,
         vbeln TYPE vbrk-vbeln,
         fkart TYPE vbrk-fkart,
         zterm TYPE vbrk-zterm,
         knumv TYPE vbrk-knumv,
         kalsm TYPE vbrk-kalsm,
*         dpten TYPE vbrk-zzdpten,
       END OF ty_vbrk,

       BEGIN OF ty_ajuste,
         vbeln TYPE vbrk-vbeln,
       END OF ty_ajuste,

       BEGIN OF ty_vbrp,
         vbeln TYPE vbrp-vbeln,
         posnr TYPE vbrp-posnr,
         vgbel TYPE vbrp-vgbel,
         aubel TYPE vbrp-aubel,
         vgpos TYPE vbrp-vgpos,
* Início 0003 -19.01.2012 17:18:50 -  Luciano Soares.
         spart TYPE vbrp-spart,
* Fim 0003 -19.01.2012 17:19:32 -  Luciano Soares.
*--> Início DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
         ntgew TYPE vbrp-ntgew,      " Peso líquido
         brgew TYPE vbrp-brgew,      " Peso bruto
         netwr TYPE vbrp-netwr,
*--> Fim DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
         vrkme TYPE vbrp-vrkme,
       END OF ty_vbrp,

       BEGIN OF ty_vbpa,
         vbeln TYPE vbpa-vbeln,
         posnr TYPE vbpa-posnr,
         parvw TYPE vbpa-parvw,
         kunnr TYPE vbpa-kunnr,
         lifnr TYPE vbpa-lifnr,
       END OF ty_vbpa,

       BEGIN OF ty_mara,
         matnr TYPE mara-matnr,
         meins TYPE mara-meins,
         bismt TYPE mara-bismt,
       END OF ty_mara,

       BEGIN OF ty_branch,
         bukrs  TYPE j_1bbranch-bukrs,
         branch TYPE j_1bbranch-branch,
       END OF ty_branch,

       BEGIN OF ty_tvko,
         vkorg TYPE tvko-vkorg,
         kunnr TYPE tvko-kunnr,
       END OF ty_tvko,

       BEGIN OF ty_tvta,
         vkorg TYPE tvta-vkorg,
         vtweg TYPE tvta-vtweg,
         spart TYPE tvta-spart,
       END OF ty_tvta,

       BEGIN OF ty_kna1,
         kunnr TYPE kna1-kunnr,
         land1 TYPE kna1-land1,
         name1 TYPE kna1-name1,
         regio TYPE kna1-regio,
         brsch TYPE kna1-brsch,
         bran1 TYPE kna1-bran1,
         konzs TYPE kna1-konzs,
       END OF ty_kna1,

       BEGIN OF ty_final,
         docnum         TYPE j_1bnfdoc-docnum, "documento interno
         bukrs          TYPE j_1bnfdoc-bukrs, " Empresa
         branch         TYPE j_1bnfdoc-branch, " Local de Negocio
         werks          TYPE j_1bnflin-werks, " Centro
* Início 0003 -19.01.2012 17:18:50 -  Luciano Soares.
         spart          TYPE vbrp-spart,      " Setor de atividade.
* Fim 0003 -19.01.2012 17:19:32 -  Luciano Soares.
         nfenum         TYPE j_1bnfdoc-nfenum, " No NFe
         nfnum          TYPE j_1bnfdoc-nfnum, " No NF
         series         TYPE j_1bnfdoc-series, " Serie
         gjahr          TYPE j_1bnfdoc-gjahr, " Exercicio
         pstdat         TYPE j_1bnfdoc-pstdat, " Data Lançamento
*        daten   TYPE vttk-daten,      " Data Estimada de Entrega
         dpten          TYPE vttk-daten,      " Data Estimada de Entrega
         datbg          TYPE vttk-datbg,      " Data Saida
         docdat         TYPE j_1bnfdoc-docdat, " Data do Documento
         nftype         TYPE j_1bnfdoc-nftype, " Categoria NF
         nfttxt         TYPE j_1baat-nfttxt,    " Descrição da categoria
         direct         TYPE j_1bnfdoc-direct, " Direção
         cancel         TYPE j_1bnfdoc-cancel, " Estornado
         candat         TYPE j_1bnfdoc-candat, " Data Estorno
         docref         TYPE j_1bnflin-docref, " Documento Original
         bstkd          TYPE vbkd-bstkd,      " Pedido Cliente
         n_ped          TYPE vbak-vbeln,      " No Pedido
         bsark          TYPE vbkd-bsark,      " Origem Pedido
         fkart          TYPE vbrk-fkart,      " Tipo de Documento de fatura
         bezei          TYPE tvaut-bezei, "Change: NNNNNNNNNN. Request: DEVKNNNNNN.
         zterm          TYPE vbrk-zterm,      " Condição de Pgto
         vtext          TYPE tvzbt-vtext,     " Descrição Zterm
         parid          TYPE j_1bnfdoc-parid, " Cod Cliente na NF
         name1          TYPE kna1-name1, " Nome Cliente na NF
         cgc            TYPE char18,   " CNPJ
         grpcl          TYPE vbpa-kunnr,      " Grupo Cliente
         ort01          TYPE kna1-ort01, " Cidade
         regio          TYPE kna1-regio,      " UF destinatario
         brsch          TYPE kna1-brsch,      " Setor industrial
         bran1          TYPE kna1-bran1,      " Key Account CCIL
         codve          TYPE vbpa-kunnr,      " Código Vendedor/Representante
         nom_ve         TYPE kna1-name1,      " Nome do Vendedor
         konzs          TYPE kna1-konzs,      " Cod Grupo Empresas
*         desc_rede      TYPE zzkonzs_t-desc_rede, " Descrição Grupo Empresas
         tdlnr          TYPE vttk-tdlnr,      " Nº Transportador
         trans          TYPE lfa1-name1,      " Transportador
         inco1          TYPE j_1bnfdoc-inco1, " Incoterms
         itmnum         TYPE j_1bnflin-itmnum, " No Item
         matnr          TYPE j_1bnflin-matnr, " Cod Material
         maktx          TYPE j_1bnflin-maktx, " Desc. material
         bismt          TYPE mara-bismt,      " Cod Material Antigo
         menge          TYPE j_1bnflin-menge, " Qdade
         meins          TYPE j_1bnflin-meins, " Unidade de Medida
         qtde_uc        TYPE j_1bnflin-menge, " Qdade UC
         qtde_cu        TYPE j_1bnflin-menge, " Qdade Caixa Unitária
*--> Início DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
         ntgew          TYPE vbrp-ntgew,      " Peso líquido
         brgew          TYPE vbrp-brgew,      " Peso bruto
         volumes        TYPE i, " Volumes em Caixas
*--> Fim DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
         nbm            TYPE j_1bnflin-nbm,   " NCM - STEUC
         matkl          TYPE j_1bnflin-matkl, " Grupo de Mercadorias
         wgbez          TYPE t023t-wgbez, "   " Denominação do grupo de mercadorias
         fam_prd        TYPE ausp-atinn,      " Familia produto
         descfam        TYPE cawnt-atwtb,     " Descrição da Familia
         cfop           TYPE j_1bnflin-cfop,  " CFOP
         refdoc         TYPE vbrp-vbeln,      " Referencia Documento de Origem do item
         netwr          TYPE j_1bnflin-netwr, " Vlr Item
         waerk          TYPE j_1bnfdoc-waerk, " Moeda
         ipi            TYPE j_1bnfstx-taxval, "  ipi
         vlr_st         TYPE j_1bnfstx-taxval, "  vlr_st
         icms           TYPE j_1bnfstx-taxval, "  icms
         icfp           TYPE j_1bnfstx-taxval, "  icfp "Bruno Barbosa - WAFX #272 - 18.01.2019
         pis            TYPE j_1bnfstx-taxval, "  pis
         cofins         TYPE j_1bnfstx-taxval, "  cofins
         icms_de        TYPE j_1bnfstx-taxval, "  icms_dedução
*-> Alteração AZB/FENIX - 27.02.19 - SISTI 1522
         icsc           TYPE j_1bnfstx-taxval,
         icap           TYPE j_1bnfstx-taxval,
         icep           TYPE j_1bnfstx-taxval,
         icsp           TYPE j_1bnfstx-taxval,
*-> Fim da Alteração AZB/FENIX - 27.02.19 - SISTI 1522
         boleto         TYPE konv-kwert,      "  ST quando Boleto
         preco_l        TYPE konv-kwert,      "  Preço lista
         descont        TYPE konv-kwert,      " Desconto

         "WA Fabrica - Inicio - 26/08/2013
         nfenum_orig    TYPE j_1bnfdoc-nfenum,
         tknum          TYPE vttk-tknum,
         lote(100)      TYPE c,
         katr4          TYPE kna1-katr4,
         "WA Fabrica - Fim    - 26/08/2013

*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Inicio
         qtde_cx        TYPE j_1bnflin-menge,
         m_padrao       TYPE j_1bnflin-meins,
         valor_estado   TYPE konv-kwert,
         valor_probreza TYPE konv-kwert,
*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Inicio

       END OF ty_final,

*       BEGIN OF ty_zzkonzs_t,
*         cod_rede  TYPE zzkonzs_t-cod_rede,
*         desc_rede TYPE zzkonzs_t-desc_rede,
*       END OF ty_zzkonzs_t,

       BEGIN OF ty_j_1baat,
         nftype TYPE j_1bnfdoc-nftype, " Categoria NF
         nfttxt TYPE j_1baat-nfttxt,    " Descrição da categoria
       END OF ty_j_1baat,

       BEGIN OF ty_tvzbt,
         zterm TYPE tvzbt-zterm,
         vtext TYPE tvzbt-vtext,
       END OF ty_tvzbt,

       BEGIN OF ty_knvh,
         hityp  TYPE knvh-hityp,
         kunnr  TYPE knvh-kunnr,
         vkorg  TYPE knvh-vkorg,
         vtweg  TYPE knvh-vtweg,
         spart  TYPE knvh-spart,
         datab  TYPE knvh-datab,
         datbi  TYPE knvh-datbi,
         hkunnr TYPE knvh-hkunnr,
       END OF ty_knvh,

       BEGIN OF ty_kalsm,
         kalsm TYPE vbrk-kalsm,
       END OF ty_kalsm,

       BEGIN OF ty_cawnt,
         atwrt TYPE cawn-atwrt,
         atwtb TYPE cawnt-atwtb,
       END OF ty_cawnt,

       BEGIN OF ty_vbap,
         vbeln  TYPE vbap-vbeln,
         posnr  TYPE vbap-posnr,
         matnr  TYPE vbap-matnr,
         spart  TYPE vbap-spart,
         kzwi1  TYPE vbap-kzwi1,
         kwmeng TYPE vbap-kwmeng,
         vrkme  TYPE vbap-vrkme,
         abgru  TYPE vbap-abgru,
         ntgew  TYPE vbap-ntgew,
         brgew  TYPE vbap-brgew,
       END OF ty_vbap,

* Change: NNNNNNNNNN. Request: DEVKNNNNNN. Início
       BEGIN OF ty_motivo,
         vbeln TYPE vbak-vbeln,
         augru TYPE vbak-augru,
         bezei TYPE tvaut-bezei,
       END OF ty_motivo.
* Change: NNNNNNNNNN. Request: DEVKNNNNNN. Fim

* WABR Fabrica - 16/03/2015 - Inicio
TYPES: BEGIN OF ty_nad,
         docnum TYPE j_1bnfnad-docnum,
         parvw  TYPE j_1bnfnad-parvw,
         parid  TYPE j_1bnfnad-parid,
         name1  TYPE j_1bnfnad-name1,
         ort01  TYPE j_1bnfnad-ort01,
         regio  TYPE j_1bnfnad-regio,
         cgc    TYPE j_1bnfnad-cgc,
       END OF ty_nad.
* WABR Fabrica - 16/03/2015 - Fim

TYPES: BEGIN OF ty_arquivo,
         linha TYPE string,
       END OF ty_arquivo.
*
*TYPES: BEGIN OF ty_konv,
*         knumv TYPE konv-knumv,
*         kposn TYPE konv-kposn,
*         kschl TYPE konv-kschl,
*         kwert TYPE konv-kwert,
*       END OF ty_konv.

*-----------------------------------------------------------------------*
* Estruturas                                                            *
*-----------------------------------------------------------------------*
DATA: wa_vend      TYPE ty_vendedor,
      wa_grpcli    TYPE ty_vendedor,
      wa_nfcli     TYPE ty_vendedor,
      wa_tpdoc     TYPE ty_tpdoc,
      wa_t005s     TYPE ty_t005s,
      wa_doc       TYPE ty_doc,
      wa_lin       TYPE ty_lin,
      wa_lin_aux   TYPE ty_lin,
      wa_branch    TYPE ty_branch,
      wa_vttk      TYPE ty_vttk,
      wa_vttp      TYPE ty_vttp,
      wa_vbrp_new  TYPE ty_vbrp,    "WA Fabrica - Inicio - 26/08/2013
      wa_vttp_new  TYPE ty_vttp,    "WA Fabrica - Inicio - 26/08/2013
      wa_lips      TYPE lips,       "WA Fabrica - Inicio - 26/08/2013
      wa_doc_new   TYPE ty_doc,     "WA Fabrica - Inicio - 26/08/2013
      wa_tvko      TYPE ty_tvko,
      wa_tvta      TYPE tvta,
      wa_tvfkt     TYPE tvfkt,
      wa_stx       TYPE ty_stx,
      wa_vbkd      TYPE ty_vbkd,
      wa_vbrk      TYPE ty_vbrk,
      wa_vbrp      TYPE ty_vbrp,
      wa_ajuste    TYPE ty_ajuste,
      wa_vbpa      TYPE ty_vbpa,
*      wa_zzkonzs_t TYPE ty_zzkonzs_t,
      wa_mara      TYPE ty_mara,
      wa_knvh      TYPE ty_knvh,
      wa_kna1      TYPE kna1,
      wa_kna1_we   TYPE kna1,
      wa_kna1_zh   TYPE kna1,
      wa_kna1_par  TYPE kna1,
      wa_final     TYPE ty_final,
      wa_kalsm     TYPE ty_kalsm,
      wa_j_1baat   TYPE ty_j_1baat,
      wa_tvzbt     TYPE ty_tvzbt,
      wa_cawnt     TYPE ty_cawnt,
      wa_vbap      TYPE ty_vbap,
      wa_motivo    TYPE ty_motivo, "Change: NNNNNNNNNN. Request: DEVKNNNNNN.
      wa_nad       TYPE ty_nad,
      wa_arquivo   TYPE ty_arquivo.

*-----------------------------------------------------------------------*
* Variaveis                                                             *
*-----------------------------------------------------------------------*
DATA:
  v_atinn       TYPE ausp-atinn,
  v_retfield    TYPE dfies-fieldname,
  v_dynprofield TYPE help_info-dynprofld,
  v_caminho     TYPE rlgrap-filename VALUE '/home/abapwork/easypoints/'.

DATA: l_tam TYPE i,
      tab   TYPE c VALUE cl_abap_char_utilities=>horizontal_tab.

DATA: l_matnr  TYPE matnr,
      l_meins  TYPE meins,
      l_menge  TYPE menge_d,
      l_kwmeng TYPE kwmeng,
      l_ntgew  TYPE ntgew.

*-----------------------------------------------------------------------*
* Constantes                                                            *
*-----------------------------------------------------------------------*
CONSTANTS: c_programa  TYPE sy-repid VALUE sy-repid,
           c_barra(01) TYPE c        VALUE '|'.
*-----------------------------------------------------------------------*
* Tabelas Internas                                                      *
*-----------------------------------------------------------------------*
DATA: ti_vend      TYPE TABLE OF ty_vendedor,
      ti_grpcli    TYPE TABLE OF ty_vendedor,
      ti_nfcli     TYPE TABLE OF ty_vendedor,
      ti_tpdoc     TYPE TABLE OF ty_tpdoc,
      ti_t005s     TYPE TABLE OF ty_t005s,
      ti_doc       TYPE TABLE OF ty_doc,
      ti_lin       TYPE TABLE OF ty_lin,
      ti_lin_aux   TYPE TABLE OF ty_lin,
      ti_branch    TYPE TABLE OF ty_branch,
      ti_vttk      TYPE TABLE OF ty_vttk,
      ti_vttp      TYPE TABLE OF ty_vttp,
      ti_vbrp_new  TYPE TABLE OF ty_vbrp,    "WA Fabrica - Inicio - 26/08/2013
      ti_vttp_new  TYPE TABLE OF ty_vttp,    "WA Fabrica - Inicio - 26/08/2013
      ti_lips      TYPE TABLE OF lips,       "WA Fabrica - Inicio - 26/08/2013
      ti_doc_new   TYPE TABLE OF ty_doc,     "WA Fabrica - Inicio - 26/08/2013
      ti_tvko      TYPE TABLE OF ty_tvko,
      ti_tvta      TYPE TABLE OF tvta,
      ti_tvfkt     TYPE TABLE OF tvfkt,
      ti_t005s_2   TYPE TABLE OF t005s,
      ti_stx       TYPE TABLE OF ty_stx,
      ti_vbkd      TYPE TABLE OF ty_vbkd,
      ti_vbrk      TYPE TABLE OF ty_vbrk,
      ti_vbrp      TYPE TABLE OF ty_vbrp,
      ti_ajuste    TYPE TABLE OF ty_ajuste,
      ti_vbpa      TYPE TABLE OF ty_vbpa,
      ti_mara      TYPE TABLE OF ty_mara,
      ti_kna1      TYPE TABLE OF ty_kna1,
*      ti_zzkonzs_t TYPE TABLE OF ty_zzkonzs_t,
      ti_final     TYPE TABLE OF ty_final,
      ti_j_1baat   TYPE TABLE OF ty_j_1baat,
      ti_tvzbt     TYPE TABLE OF ty_tvzbt,
      ti_knvh      TYPE TABLE OF ty_knvh,
      ti_kalsm     TYPE TABLE OF ty_kalsm,
      ti_cawnt     TYPE TABLE OF ty_cawnt,
      t_area       TYPE STANDARD TABLE OF bapi_sdvtber,
      t_knvh       TYPE STANDARD TABLE OF bapikna1_knvh,
      t_vbap       TYPE TABLE OF ty_vbap,
      t_motivo     TYPE TABLE OF ty_motivo, "Change: NNNNNNNNNN. Request: DEVKNNNNNN.
      t_nad        TYPE TABLE OF ty_nad,
*      t_redes      TYPE TABLE OF ty_zzkonzs_t,
      t_arquivo    TYPE TABLE OF ty_arquivo.

*-----------------------------------------------------------------------*
* Tela de seleção                                                       *
*-----------------------------------------------------------------------*
* Tabelas
TABLES: j_1bnfdoc,
        j_1bnflin,
        j_1bbranch,
        j_1baa,
        vttk,
        tvko,
        tvta,
        kna1,
        t005s,
        knvh,
        tvfkt.

*----------------------------------------------------------------------*
* Objetos do ALV
*----------------------------------------------------------------------*
INCLUDE: icons.
* Tipos
TYPE-POOLS:
  kkblo,
  slis.                      " ALV Global types

* Estruturas
DATA: s_def_variant TYPE disvariant,
      s_variant     TYPE disvariant,
      s_layout      TYPE slis_layout_alv,
      s_varia       TYPE disvariant,
      grid_set      TYPE lvc_s_glay.

* Tabelas Internas
DATA:
  t_fieldcat TYPE slis_t_fieldcat_alv,
  t_sort     TYPE slis_t_sortinfo_alv.

SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE text-bl1.
SELECT-OPTIONS: so_bukrs    FOR j_1bnfdoc-bukrs NO INTERVALS NO-EXTENSION, "OBLIGATORY,
                so_pstdt    FOR j_1bnfdoc-pstdat NO-EXTENSION,
                so_daten    FOR vttk-daten NO-EXTENSION,
                so_vkorg    FOR tvko-vkorg NO-EXTENSION NO INTERVALS, "OBLIGATORY,
                so_vtweg    FOR tvta-vtweg NO-EXTENSION NO INTERVALS,
                so_branc    FOR j_1bbranch-branch,
                so_werks    FOR j_1bnflin-werks NO INTERVALS NO-EXTENSION,
                so_nftyp    FOR j_1bnfdoc-nftype .
PARAMETERS:     p_vende     TYPE kunnr.
SELECT-OPTIONS: so_parid    FOR j_1bnfdoc-parid NO INTERVALS NO-EXTENSION.
SELECT-OPTIONS: p_grpcli    FOR knvh-hkunnr NO INTERVALS NO-EXTENSION,
                so_tknum    FOR vttk-tknum.                 "DEVK943244

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 01(31) text-002.
PARAMETERS: p_estor  AS CHECKBOX.
SELECTION-SCREEN END OF LINE.

SELECT-OPTIONS:
                p_fkart     FOR tvfkt-fkart,
                so_direc    FOR j_1bnfdoc-direct,
                so_matnr    FOR j_1bnflin-matnr NO INTERVALS NO-EXTENSION,
                so_matkl    FOR j_1bnflin-matkl NO INTERVALS NO-EXTENSION,
                so_spart    FOR tvta-spart NO INTERVALS NO-EXTENSION.
PARAMETERS: p_bland TYPE t005s-bland .

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 01(31) text-001.
PARAMETERS: p_edi  AS CHECKBOX.
SELECTION-SCREEN END OF LINE.
PARAMETERS: p_atwtb TYPE atwrt .

SELECTION-SCREEN END OF BLOCK bl1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-l01.
PARAMETERS: p_vari      TYPE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b2.


*SELECTION-SCREEN: BEGIN OF BLOCK block2 WITH FRAME TITLE text-007.
*
*PARAMETERS: p_grava AS CHECKBOX.
*
** Opção local
*SELECTION-SCREEN BEGIN OF LINE.
*SELECTION-SCREEN POSITION 03.
*PARAMETERS: p_loc RADIOBUTTON GROUP bt01 DEFAULT 'X'.
*SELECTION-SCREEN COMMENT 05(08) text-loc.
*SELECTION-SCREEN END OF LINE.
*
** Diretório/Arquivo de entrada
*SELECTION-SCREEN BEGIN OF LINE.
*SELECTION-SCREEN COMMENT 05(29) text-dir.
*PARAMETERS: p_dire   TYPE rlgrap-filename.
*SELECTION-SCREEN END OF LINE.
*
** Servidor
*SELECTION-SCREEN BEGIN OF LINE.
*SELECTION-SCREEN POSITION 03.
*PARAMETERS: p_serve  RADIOBUTTON GROUP bt01.
*SELECTION-SCREEN COMMENT 05(08) text-ser.
*SELECTION-SCREEN END OF LINE.
*
** Diretório/Arquivo de entrada
*SELECTION-SCREEN BEGIN OF LINE.
*SELECTION-SCREEN COMMENT 05(29) text-arq.
*PARAMETERS: p_arqe TYPE rlgrap-filename DEFAULT v_caminho.
*SELECTION-SCREEN END OF LINE.
*
*SELECTION-SCREEN: END OF BLOCK block2.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  PERFORM f_select_variavel_alv.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vende.
  PERFORM f_match_code_vende.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_grpcli-low.
  PERFORM f_match_grupo_cli.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fkart-low.
  PERFORM f_match_tipo_doc.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_bland.
  PERFORM f_match_est_cli_receb.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_atwtb.
  PERFORM f_match_code_p_atzhl.

INITIALIZATION.
  REFRESH p_fkart.
  CLEAR p_fkart.

AT SELECTION-SCREEN.

*  IF NOT so_daten IS INITIAL AND
*     NOT so_pstdt IS INITIAL.
*    MESSAGE i000(zsd) WITH text-004.
*    STOP.
*  ENDIF.
*
*  IF so_daten IS INITIAL AND
*     so_pstdt IS INITIAL.
*    MESSAGE i000(zsd) WITH text-005.
*    STOP.
*  ENDIF.

  CHECK sy-ucomm <> space.
  IF NOT p_fkart-high IS INITIAL."
    LOOP AT p_fkart.
      CLEAR p_fkart-high.
      p_fkart-sign = 'I'.
      p_fkart-option = 'EQ'.
      MODIFY p_fkart.
    ENDLOOP.
  ENDIF.

*  IF p_fkart-low IS INITIAL."
*    PERFORM f_preenche_fkart USING 'ZD01'.
*    PERFORM f_preenche_fkart USING 'ZR01'.
*    PERFORM f_preenche_fkart USING 'ZS01'.
*  ENDIF.

  IF NOT p_vende IS INITIAL.
    PERFORM f_busca_hierarquia.
  ENDIF.

  IF so_branc[] IS INITIAL.
    PERFORM f_preenche_branc USING so_bukrs-low.
  ENDIF.

*  IF so_nftyp[] IS INITIAL.
*    PERFORM f_preenche_nftyp USING 'I3'.
*    PERFORM f_preenche_nftyp USING 'I4'.
*    PERFORM f_preenche_nftyp USING 'I5'.
*  ENDIF.

*  IF so_direc[] IS INITIAL.
*    PERFORM f_preenche_direct USING '1'.
*    PERFORM f_preenche_direct USING '2'.
*  ENDIF.

* Inicio de processamento
START-OF-SELECTION.
  PERFORM f_seleciona_dados.
  PERFORM f_processar_dados.


  PERFORM f_exibe_dados.

* WABR Fabrica - 28/08/2015 - Inicio
*  IF p_grava = 'X'.
*    PERFORM f_download_arquivo.
*  ENDIF.
** WABR Fabrica - 28/08/2015 - Fim

*&---------------------------------------------------------------------*
*&      Form  F_MATCH_CODE_VENDE
*&---------------------------------------------------------------------*
FORM f_match_code_vende .

  SELECT kunnr
         name1
    INTO TABLE ti_vend
    FROM kna1
    WHERE ktokd EQ 'ZCL9'.
  IF sy-subrc IS INITIAL.
    SORT ti_vend BY kunnr.
  ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield    = 'KUNNR'
      dynpprog    = c_programa
      dynpnr      = sy-dynnr
      dynprofield = 'P_VENDE'
      value_org   = 'S'
    TABLES
      value_tab   = ti_vend[].

ENDFORM.                    " F_MATCH_CODE_VENDE
*&---------------------------------------------------------------------*
*&      Form  F_MATCH_GRUPO_CLI
*&---------------------------------------------------------------------*
FORM f_match_grupo_cli .

  SELECT kunnr
         name1
    INTO TABLE ti_grpcli
    FROM kna1
    WHERE ktokd EQ 'ZCL8'.
  IF sy-subrc IS INITIAL.
    SORT ti_vend BY kunnr.
  ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield    = 'KUNNR'
      dynpprog    = c_programa
      dynpnr      = sy-dynnr
      dynprofield = 'P_GRPCLI'
      value_org   = 'S'
    TABLES
      value_tab   = ti_grpcli[].

ENDFORM.                    " F_MATCH_GRUPO_CLI
*&---------------------------------------------------------------------*
*&      Form  F_MATCH_TIPO_DOC
*&---------------------------------------------------------------------*
FORM f_match_tipo_doc .
  RANGES: r_fkart FOR tvfkt-fkart.

  r_fkart-sign = 'I'.
  r_fkart-option ='EQ'.
  r_fkart-low = 'ZD01'.
  APPEND r_fkart.

  r_fkart-sign = 'I'.
  r_fkart-option ='EQ'.
  r_fkart-low = 'ZR01'.
  APPEND r_fkart.

  r_fkart-sign = 'I'.
  r_fkart-option ='EQ'.
  r_fkart-low = 'ZS01'.
  APPEND r_fkart.


  SELECT fkart
         vtext
    FROM tvfkt
    INTO TABLE ti_tpdoc
    WHERE spras EQ 'P'
      AND fkart IN r_fkart.
  IF sy-subrc IS INITIAL.
    SORT ti_tpdoc BY fkart.
  ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield    = 'FKART'
      dynpprog    = c_programa
      dynpnr      = sy-dynnr
      dynprofield = 'P_FKART'
      value_org   = 'S'
    TABLES
      value_tab   = ti_tpdoc[].



ENDFORM.                    " F_MATCH_TIPO_DOC
*&---------------------------------------------------------------------*
*&      Form  F_MATCH_EST_CLI_RECEB
*&---------------------------------------------------------------------*

FORM f_match_est_cli_receb.

  SELECT                                                    "land1
         bland
    FROM t005s
    INTO TABLE ti_t005s
    WHERE land1 = 'BR'.
  IF sy-subrc IS INITIAL.
*    SORT ti_t005s BY land1.
    SORT ti_t005s BY bland.
  ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield    = 'LAND1'
      dynpprog    = c_programa
      dynpnr      = sy-dynnr
      dynprofield = 'P_BLAND'
      value_org   = 'S'
    TABLES
      value_tab   = ti_t005s[].

ENDFORM.                    " F_MATCH_EST_CLI_RECEB
*&---------------------------------------------------------------------*
*&      Form  F_SELECIONA_DADOS
*&---------------------------------------------------------------------*
FORM f_seleciona_dados .

  IF NOT so_daten IS INITIAL.
    PERFORM f_por_transporte.
  ELSE.
    PERFORM f_por_nota_fiscal.
  ENDIF.
*** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:34:45
  IF ti_vbkd[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:34:45
* Change: NNNNNNNNNN. Request: DEVKNNNNNN. Início
    SELECT k~vbeln k~augru t~bezei
      INTO TABLE t_motivo
      FROM vbak AS k INNER JOIN tvaut AS t ON k~augru = t~augru
      FOR ALL ENTRIES IN ti_vbkd
      WHERE vbeln = ti_vbkd-vbeln
        AND spras = sy-langu.
* Change: NNNNNNNNNN. Request: DEVKNNNNNN. Fim
*** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:34:45
  ENDIF.
*** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:34:45
* WABR Fabrica - 16/03/2015 - Inicio
  IF ti_doc[] IS NOT INITIAL.
    SELECT docnum
           parvw
           parid
           name1
           ort01
           regio
           cgc
    INTO TABLE t_nad
    FROM j_1bnfnad
    FOR ALL ENTRIES IN ti_doc
    WHERE docnum = ti_doc-docnum
    AND parvw = 'WE'.
    IF sy-subrc = 0.
      SORT t_nad BY docnum.
    ENDIF.
  ENDIF.
* WABR Fabrica - 16/03/2015 - Fim

* Busca Nomes das Redes
*  SELECT cod_rede
*           desc_rede
*    INTO TABLE t_redes
*      FROM zzkonzs_t.
*  IF sy-subrc = 0.
*    SORT t_redes BY cod_rede.
*  ENDIF.

ENDFORM.                    " F_SELECIONA_DADOS
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTE_LIN
*&---------------------------------------------------------------------*
FORM f_ajuste_lin .
  ti_lin_aux[] = ti_lin[].
  DELETE ADJACENT DUPLICATES FROM ti_lin_aux COMPARING docnum.


  LOOP AT ti_lin_aux INTO wa_lin_aux.
    wa_ajuste-vbeln = wa_lin_aux-refkey.
    APPEND wa_ajuste TO ti_ajuste.
  ENDLOOP.

ENDFORM.                    " F_AJUSTE_LIN
*&---------------------------------------------------------------------*
*&      Form  F_PROCESSAR_DADOS
*&---------------------------------------------------------------------*
FORM f_processar_dados .
  DATA: vl_vbeln TYPE vbrp-vbeln,
        wl_lfa1  TYPE lfa1,
        vl_menge TYPE ekpo-menge,
        vl_kwert TYPE konv-kwert,
        vl_cgc   TYPE j_1bwfield-cgc_number,
        vl_atzhl TYPE cawnt-atzhl,
        volumes  TYPE vbap-kwmeng,
        vl_valor TYPE konv-kwert,
        vl_total TYPE konv-kwert,
*        wl_konv  TYPE ty_konv,
*        lt_konv  TYPE TABLE OF ty_konv.

*  DATA: lt_tvarvc TYPE STANDARD TABLE OF tvarvc WITH HEADER LINE.

*  RANGES: r_kschl FOR konv-kschl.
*  DATA: w_kschl LIKE LINE OF r_kschl.

*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Inicio
*  DATA: lv_verde     TYPE c,
        vl_menge_new TYPE ekpo-menge.

  " Verifica se é empresa Verde Campo
  " e marca um fleg de OK
*  SELECT COUNT(*)
*    FROM tvarvc
*    WHERE name EQ 'LVCR_VKORG'
*      AND low  EQ so_vkorg-low.
*  IF sy-subrc EQ 0.
*    lv_verde = 'X'.
*  ENDIF.
*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Fim

  LOOP AT ti_lin INTO wa_lin.
    CLEAR: wa_doc.
    READ TABLE ti_doc INTO wa_doc WITH KEY docnum = wa_lin-docnum
                                  BINARY SEARCH.
    IF sy-subrc = 0.
*
    ENDIF.
*Fim - 0001 - 05/12/2012.
    CLEAR wa_final.

    CASE p_estor.
      WHEN 'X'."lista de estornados
        IF wa_doc-cancel EQ space.
*          CONTINUE.
        ENDIF.
      WHEN space."lista sem estornados
        IF wa_doc-cancel EQ 'X'.
*          CONTINUE.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

* Busca dados da Doc e da Lin
    wa_final-docnum  = wa_doc-docnum.
    wa_final-bukrs   = wa_doc-bukrs.
    wa_final-branch  = wa_doc-branch.
    wa_final-werks   = wa_lin-werks.
    wa_final-nfenum  = wa_doc-nfenum.
    wa_final-nfnum   = wa_doc-nfnum.
    wa_final-series  = wa_doc-series.
    wa_final-gjahr   = wa_doc-gjahr.
    wa_final-pstdat  = wa_doc-pstdat.
    wa_final-docdat  = wa_doc-docdat.
    wa_final-nftype  = wa_doc-nftype.
    wa_final-direct  = wa_doc-direct.
    wa_final-cancel  = wa_doc-cancel.
    wa_final-candat  = wa_doc-candat.
    wa_final-docref  = wa_lin-docref.
    wa_final-parid   = wa_doc-parid.
    CALL FUNCTION 'KNA1_READ_SINGLE'
      EXPORTING
        id_kunnr            = wa_doc-parid
      IMPORTING
        es_kna1             = wa_kna1
      EXCEPTIONS
        not_found           = 1
        input_not_specified = 2
        OTHERS              = 3.
    IF sy-subrc = 0.
      wa_final-name1   = wa_kna1-name1.
      wa_final-katr4   = wa_kna1-katr4.
    ENDIF.
    wa_final-cgc     = wa_kna1-stcd1.
    wa_final-ort01   = wa_kna1-ort01.
    wa_final-inco1   = wa_doc-inco1.
    wa_final-itmnum  = wa_lin-itmnum.
    wa_final-matnr   = wa_lin-matnr.
    wa_final-maktx   = wa_lin-maktx.
    wa_final-menge   = wa_lin-menge.
    wa_final-meins   = wa_lin-meins.
    wa_final-nbm     = wa_lin-nbm.
    wa_final-waerk   = wa_doc-waerk.
    wa_final-matkl   = wa_lin-matkl.
    wa_final-cfop    = wa_lin-cfop.
*        wa_final-netwr    = wa_lin-netwr.

    CLEAR: wa_knvh.
    READ TABLE ti_knvh INTO wa_knvh WITH KEY kunnr = wa_doc-parid
                                             hityp = 'W'
                                             BINARY SEARCH.
*REMOVIDO
*    IF sy-subrc = 0.
*      wa_final-grpcl = wa_knvh-hkunnr.
*    ELSE.
*      IF NOT p_grpcli IS INITIAL.
**        CONTINUE.
*      ENDIF.
*    ENDIF.
** data de lançamento
*    READ TABLE ti_vbrp INTO wa_vbrp WITH KEY vbeln = wa_lin-refkey
*                                             posnr = wa_lin-itmnum.
*    IF sy-subrc IS INITIAL.
*
*      wa_final-refdoc = wa_vbrp-vbeln.
** Início 0003 -19.01.2012 17:20:40 -  Luciano Soares.
*      wa_final-spart = wa_vbrp-spart.
** Fim 0003 -19.01.2012 17:21:07 -  Luciano Soares.
*
**--> Início DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
*      wa_final-ntgew   = wa_vbrp-ntgew.
*      wa_final-brgew   = wa_vbrp-brgew.
*
**--> Busca PESO (LIQ./Bruto) da ordem DEV. - Processo Verde Campo.
*      IF wa_doc-bukrs EQ '0600' AND
*         ( wa_vbrp-vrkme EQ 'UN' OR
*           wa_vbrp-vrkme EQ 'YUN' ).
*
*        READ TABLE t_vbap INTO wa_vbap
*         WITH KEY vbeln = wa_vbrp-aubel
*                  posnr = wa_vbrp-vgpos
*        BINARY SEARCH.
*        IF sy-subrc IS INITIAL.
*          wa_final-ntgew   = wa_vbap-ntgew.
*          wa_final-brgew   = wa_vbap-brgew.
*        ENDIF.
*      ENDIF.
*---<
      SELECT SINGLE p~matnr p~meins p~kwmeng m~ntgew
         INTO ( l_matnr, l_meins, l_menge, l_ntgew )
         FROM vbap AS p
        INNER JOIN mara AS m
           ON p~matnr EQ m~matnr
        WHERE p~vbeln = wa_vbrp-aubel
          AND p~posnr = wa_vbrp-posnr.

      IF wa_lin-werks EQ '0604' AND wa_lin-meins EQ 'KG'.

*** WAFX Fabrica - #269 Ajuste mask CNPJ - 17.01.2019 - Inicio
        IF l_ntgew IS NOT INITIAL.
          vl_menge = l_menge / l_ntgew.
        ENDIF.
*** WAFX Fabrica - #269 Ajuste mask CNPJ - 17.01.2019 - Fim

      ELSE.

        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
          EXPORTING
            i_matnr              = l_matnr " wa_lin-matnr
            i_in_me              = l_meins " wa_lin-meins
            i_out_me             = 'KI'
            i_menge              = l_menge " wa_lin-menge
          IMPORTING
            e_menge              = vl_menge
          EXCEPTIONS
            error_in_application = 1
            error                = 2
            OTHERS               = 3.

      ENDIF.

*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Inicio
* 12.06.2019; wmacha.terc Wagner Machado - Focus IT       M001
*      IF lv_verde IS NOT INITIAL.
*        DATA: lv_in  TYPE mara-meins,                  "M001+
*              lv_out TYPE mara-meins.                  "M001+

* Obter unidade de medida do cadastro do material
*        SELECT SINGLE meins INTO lv_in FROM mara       "M001+
*          WHERE matnr = wa_lin-matnr.                  "M001+

*        IF lv_in EQ 'CX' OR                              "M001+
*           lv_in EQ 'KI'.                                "M001+

        IF wa_lin-meins EQ 'UN' OR
           wa_lin-meins EQ 'YUN'.


*          lv_in  = 'UN'.
*          lv_out = 'CX'.

          " Converte unidade de medida
*          CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
*            EXPORTING
*              input          = lv_in
*              language       = sy-langu
*            IMPORTING
*              output         = lv_in
*            EXCEPTIONS
*              unit_not_found = 1
*              OTHERS         = 2.
*          IF sy-subrc <> 0.
*            CLEAR lv_in.
*          ENDIF.

          " Converte unidade de medida
*          CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
*            EXPORTING
*              input          = lv_out
*              language       = sy-langu
*            IMPORTING
*              output         = lv_out
*            EXCEPTIONS
*              unit_not_found = 1
*              OTHERS         = 2.
*          IF sy-subrc <> 0.
*            CLEAR lv_in.
*          ENDIF.

*          IF lv_in IS NOT INITIAL AND
*             lv_out IS NOT INITIAL.
*            " Quantidade UN ou YUN
*            CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*              EXPORTING
*                i_matnr              = wa_lin-matnr
*                i_in_me              = lv_in
*                i_out_me             = lv_out
*                i_menge              = wa_lin-menge
*              IMPORTING
*                e_menge              = vl_menge_new
*              EXCEPTIONS
*                error_in_application = 1
*                error                = 2
*                OTHERS               = 3.
*            IF sy-subrc = 0.
*              wa_final-qtde_cx  = vl_menge_new.
*              wa_final-m_padrao = lv_in.
*            ENDIF.
*          ENDIF.
*        ELSEIF wa_lin-meins EQ 'KG' OR
*               wa_lin-meins EQ 'CX' OR
*               wa_lin-meins EQ 'KI'.
*          wa_final-qtde_cx  = wa_lin-menge.
*        ENDIF.
*      ENDIF.
*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Fim

*      IF sy-subrc = 0.
      volumes = frac( vl_menge ).
      IF volumes > '0.5'.
        volumes = ceil( vl_menge ).
      ELSE.
        volumes = floor( vl_menge ).
      ENDIF.
      wa_final-volumes = volumes.
      ENDIF.
*--> Início DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244

* Data Lançamento e saida
      READ TABLE ti_vttp INTO wa_vttp WITH KEY vbeln = wa_vbrp-vgbel.
      IF sy-subrc IS INITIAL.
        READ TABLE ti_vttk  INTO wa_vttk WITH KEY tknum = wa_vttp-tknum
                                         BINARY SEARCH.
        IF sy-subrc IS INITIAL.
*              wa_final-daten  = wa_vttk-daten.
*              wa_final-dpten  = wa_vttk-dpten.
          wa_final-datbg  = wa_vttk-datbg.
          wa_final-tdlnr  = wa_vttk-tdlnr.

* Busca nome transportador
          CALL FUNCTION 'LFA1_READ_SINGLE'
            EXPORTING
              id_lifnr            = wa_vttk-tdlnr
            IMPORTING
              es_lfa1             = wl_lfa1
            EXCEPTIONS
              not_found           = 1
              input_not_specified = 2
              OTHERS              = 3.
          IF sy-subrc = 0.
            wa_final-trans  = wl_lfa1-name1.
          ENDIF.
        ENDIF.
      ENDIF.

* Pega o BSTKD e Numero do pedido
      vl_vbeln = wa_vbrp-aubel.
      wa_final-n_ped = vl_vbeln.
      READ TABLE ti_vbkd INTO wa_vbkd WITH KEY vbeln = vl_vbeln.
      IF sy-subrc IS INITIAL.

* Verifica se o pedido é EDI , SE Sim verifica se está marcado para exibir os EDI
        IF NOT p_edi IS INITIAL.
          IF wa_vbkd-bsark <> 'EDI'.
*            CONTINUE.
          ENDIF.
        ENDIF.

* WABR Fabrica - 16/03/2015 - Inicio
*** Caso o pedido for EDI, as informações deverão ser do Recebedor da Mercadoria (WE)
        IF wa_vbkd-bsark = 'EDI'.
          CLEAR wa_nad.
          READ TABLE t_nad INTO wa_nad WITH KEY docnum = wa_doc-docnum
                                       BINARY SEARCH.
          IF sy-subrc = 0.
            wa_final-parid = wa_nad-parid.
            wa_final-name1 = wa_nad-name1.
            wa_final-cgc = wa_nad-cgc.
            wa_final-ort01 = wa_nad-ort01.

            vl_cgc = wa_nad-cgc.
            WRITE vl_cgc TO wa_final-cgc USING EDIT MASK '__.___.___/____-__'.

*** WAFX Fabrica - #269 Ajuste mask CNPJ - 17.01.2019 - Inicio
          ELSE.
            vl_cgc = wa_final-cgc.
            WRITE vl_cgc TO wa_final-cgc USING EDIT MASK '__.___.___/____-__'.
*** WAFX Fabrica - #269 Ajuste mask CNPJ - 17.01.2019 - Fim

          ENDIF.
        ENDIF.
* WABR Fabrica - 16/03/2015 - Fim

*
*        wa_final-bstkd = wa_vbkd-bstkd.
*        wa_final-bsark = wa_vbkd-bsark.
** Change: NNNNNNNNNN. Request: DEVKNNNNNN. Início
*        READ TABLE t_motivo INTO wa_motivo WITH KEY vbeln = wa_vbkd-vbeln.
*        IF sy-subrc IS INITIAL.
*          wa_final-bezei = wa_motivo-bezei.
*
** WA Fábrica - 10/12/2013 - Inicio
*          REPLACE ALL OCCURRENCES OF '#' IN wa_final-bezei WITH ''.
*          l_tam = strlen( wa_final-bezei ).
*          IF l_tam > 1.
*            l_tam = l_tam - 1.
*            IF wa_final-bezei+l_tam(1) = tab.
*              wa_final-bezei = wa_final-bezei(l_tam).
*            ENDIF.
*          ENDIF.
** WA Fábrica - 10/12/2013 - Fim
*
*        ENDIF.
** Change: NNNNNNNNNN. Request: DEVKNNNNNN. Fim
*      ENDIF.
*
** Tipo de Documento de fatura
*      READ TABLE ti_vbrk INTO wa_vbrk WITH KEY vbeln = wa_vbrp-vbeln.
*      IF sy-subrc IS INITIAL.
*        wa_final-fkart = wa_vbrk-fkart.
*        wa_final-zterm = wa_vbrk-zterm.
**        wa_final-dpten = wa_vbrk-dpten.
*
**** WAFX: #690 Inclusão de colunas - 21.05.2019 - Inicio
**        IF lv_verde IS NOT INITIAL.
**          IF wa_lin-meins EQ 'CX' OR
**             wa_lin-meins EQ 'KI'.
**
**            SELECT kwert UP TO 1 ROWS
**                FROM konv
**                INTO wa_final-valor_estado
**                WHERE knumv EQ wa_vbrk-knumv
**                  AND kposn EQ wa_lin-itmnum
**                  AND kschl EQ 'BX95'.
**            ENDSELECT.
**
**            SELECT kwert UP TO 1 ROWS
**                FROM konv
**                INTO wa_final-valor_probreza
**                WHERE knumv EQ wa_vbrk-knumv
**                  AND kposn EQ wa_lin-itmnum
**                  AND kschl EQ 'BX96'.
**            ENDSELECT.
**          ENDIF.
**        ENDIF.
***** WAFX: #690 Inclusão de colunas - 21.05.2019 - Inicio
*
*        READ TABLE ti_tvzbt INTO wa_tvzbt WITH KEY zterm = wa_vbrk-zterm.
*        IF sy-subrc IS INITIAL.
*          wa_final-vtext = wa_tvzbt-vtext.
*        ENDIF.
*
*        CLEAR wa_kalsm.
*        READ TABLE ti_kalsm INTO wa_kalsm WITH KEY kalsm = wa_vbrk-kalsm
*                                          BINARY SEARCH.
*        IF sy-subrc = 0.
** Acessar KONV ST quando Boleto
*          SELECT kwert UP TO 1 ROWS
*            FROM konv
*            INTO vl_kwert
*            WHERE knumv EQ wa_vbrk-knumv
*              AND kposn EQ wa_lin-itmnum
*              AND kschl EQ 'BX41'.
*          ENDSELECT.
*          IF sy-subrc IS INITIAL.
*            wa_final-boleto = vl_kwert.
*            CLEAR vl_kwert.
*          ENDIF.
*        ENDIF.
*
**-> Alteração AZB/FENIX - 26.02.19 - STI 1522 - DEVK946721
*        IF so_vkorg-low EQ '0500'.
**          CLEAR:  lt_tvarvc[].
**          SELECT *
**            FROM tvarvc
**              INTO TABLE lt_tvarvc
**                WHERE name EQ '0500_ZSD_TPCONDICAO_PRECOLISTA'. "ZSD_TPCONDICAO_PRECOLISTA'.
**          IF sy-subrc EQ 0.
**            READ TABLE lt_tvarvc INDEX 1.
**          ENDIF.
*
**        ELSEIF so_vkorg-low EQ '0600'.
***          CLEAR:  lt_tvarvc[].
**          SELECT *
**            FROM tvarvc
**              INTO TABLE lt_tvarvc
**                WHERE name EQ '0600_ZSD_TPCONDICAO_PRECOLISTA'. "ZSD_TPCONDICAO_PRECOLISTA'.
**          IF sy-subrc EQ 0.
**            READ TABLE lt_tvarvc INDEX 1.
**          ENDIF.
**        ENDIF.
*
*        "WAFX - 04.04.2019 - Chamado #547 - Inicio
**        FREE: r_kschl[].
***        LOOP AT lt_tvarvc.
**          CLEAR w_kschl.
**          IF lt_tvarvc-sign IS NOT INITIAL.
**            w_kschl-sign = lt_tvarvc-sign.
**          ELSE.
**            w_kschl-sign = 'I'.
**          ENDIF.
**          IF lt_tvarvc-opti IS NOT INITIAL.
**            w_kschl-option = lt_tvarvc-opti.
**          ELSE.
**            w_kschl-option = 'EQ'.
**          ENDIF.
**          w_kschl-low = lt_tvarvc-low(4).
**          w_kschl-high = lt_tvarvc-high(4).
**          APPEND w_kschl TO r_kschl.
**        ENDLOOP.
*        "WAFX - 04.04.2019 - Chamado #547 - Fim
*
*
** Acessar KONV ST quando Boleto
*        SELECT kwert UP TO 1 ROWS
*          FROM konv
*          INTO vl_kwert
*          WHERE knumv EQ wa_vbrk-knumv
*            AND kposn EQ wa_lin-itmnum.
**            AND kschl IN r_kschl[].                         "04.04.2019 WAFX
****            AND kschl EQ lt_tvarvc-low(4). "'ZPLS'.      "04.04.2019 WAFX
*        ENDSELECT.
**-> Fim da Alteração AZB/FENIX - 26.02.19 - STI 1522 - DEVK946721
*
*        IF sy-subrc IS INITIAL.
*          wa_final-preco_l = vl_kwert.
*          CLEAR vl_kwert.
*        ENDIF.
*
**-> Alteração AZB/FENIX - 26.02.19 - STI 1522 - DEVK946721
*        IF so_vkorg-low EQ '0500'.
**          CLEAR:  lt_tvarvc[].
**          SELECT *
**            FROM tvarvc
**              INTO TABLE lt_tvarvc
**                WHERE name EQ '0500_ZSD_TPCONDICAO_DESCONTO'. "ZSD_TPCONDICAO_DESCONTO'.
**          IF sy-subrc EQ 0.
**            READ TABLE lt_tvarvc INDEX 1.
**          ENDIF.
*
**        ELSEIF so_vkorg-low EQ '0600'.
**          CLEAR:  lt_tvarvc[].
**          SELECT *
**            FROM tvarvc
**              INTO TABLE lt_tvarvc
**                WHERE name EQ '0600_ZSD_TPCONDICAO_DESCONTO'. "ZSD_TPCONDICAO_DESCONTO'.
**          IF sy-subrc EQ 0.
**            READ TABLE lt_tvarvc INDEX 1.
**          ENDIF.
**        ENDIF.
***-> Fim da Alteração AZB/FENIX - 26.02.19 - STI 1522 - DEVK946721
*
** Acessar KONV desconto
*        SELECT kwert UP TO 1 ROWS
*          FROM konv
*          INTO vl_kwert
*          WHERE knumv EQ wa_vbrk-knumv
*            AND kposn EQ wa_lin-itmnum.
**            AND kschl EQ lt_tvarvc-low(4). "'ZDLS'.
*        ENDSELECT.
*        IF sy-subrc IS INITIAL.
*          wa_final-descont = vl_kwert.
*          CLEAR vl_kwert.
*        ENDIF.
*
*      ENDIF.
*    ELSE.
**      CONTINUE.
*    ENDIF.
*
** pegar descrição do tipo de nota
*    READ TABLE ti_j_1baat INTO wa_j_1baat WITH KEY nftype = wa_doc-nftype
*                                          BINARY SEARCH.
*    IF sy-subrc IS INITIAL.
*      wa_final-nfttxt = wa_j_1baat-nfttxt.
*    ENDIF.
*
** Acessar VBPA pegar o UF destinatario
*    READ TABLE ti_vbpa INTO wa_vbpa WITH KEY vbeln = wa_vbkd-vbeln
*                                             parvw = 'WE'.
*    IF sy-subrc IS INITIAL.
*      CALL FUNCTION 'CUSTOMER_READ'
*        EXPORTING
*          i_bukrs   = wa_doc-bukrs
*          i_kunnr   = wa_vbpa-kunnr
*        IMPORTING
*          e_kna1    = wa_kna1_we
**         E_KNB1    =
*        EXCEPTIONS
*          not_found = 1
*          OTHERS    = 2.
*      IF sy-subrc = 0.
*        wa_final-regio = wa_kna1_we-regio.
*        wa_final-konzs = wa_kna1_we-konzs. "Grupo empresarial do Cliente
*        IF NOT p_bland IS INITIAL.
*          IF wa_kna1_we-regio <> p_bland.
**            CONTINUE.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*
** pegar Setor industrial/
*    CALL FUNCTION 'CUSTOMER_READ'
*      EXPORTING
*        i_bukrs   = wa_doc-bukrs
*        i_kunnr   = wa_doc-parid
*      IMPORTING
*        e_kna1    = wa_kna1_par
**       E_KNB1    =
*      EXCEPTIONS
*        not_found = 1
*        OTHERS    = 2.
*    IF sy-subrc = 0.
*      wa_final-brsch = wa_kna1_par-brsch.
*      wa_final-bran1 = wa_kna1_par-bran1.
*
** WABR Fabrica - 18/03/2015 - Inicio
**        vl_cgc = wa_kna1_par-stcd1.
**        WRITE vl_cgc TO wa_final-cgc USING EDIT MASK '__.___.___/____-__'.
*      IF  wa_vbkd-bsark <> 'EDI'.
*        vl_cgc = wa_kna1_par-stcd1.
*        WRITE vl_cgc TO wa_final-cgc USING EDIT MASK '__.___.___/____-__'.
*      ENDIF.
** WABR Fabrica - 18/03/2015 - Fim
*
**** WAFX Fabrica - #269 Ajuste mask CNPJ - 17.01.2019 - Inicio
*    ELSE.
*      IF  wa_vbkd-bsark <> 'EDI'.
*        vl_cgc = wa_final-cgc.
*        WRITE vl_cgc TO wa_final-cgc USING EDIT MASK '__.___.___/____-__'.
*      ENDIF.
**** WAFX Fabrica - #269 Ajuste mask CNPJ - 17.01.2019 - Fim
*    ENDIF.
*
** Pegar descrição do Grupo empresarial
**    CLEAR wa_zzkonzs_t.
**    READ TABLE t_redes INTO wa_zzkonzs_t WITH KEY cod_rede = wa_final-konzs.
**    IF sy-subrc EQ 0 AND NOT wa_final-regio IS INITIAL.
**      CONCATENATE: wa_zzkonzs_t-desc_rede '-' wa_final-regio INTO wa_final-desc_rede SEPARATED BY space.
**    ELSEIF sy-subrc EQ 0 AND wa_final-regio IS INITIAL.
**      wa_final-desc_rede = wa_zzkonzs_t-desc_rede.
**    ENDIF.
*
** pegar vendedor , parceiro ZH
*    CLEAR wa_vbpa.
*    READ TABLE ti_vbpa INTO wa_vbpa WITH KEY vbeln = wa_vbkd-vbeln
*                                             parvw = 'ZH'.
*    IF sy-subrc IS INITIAL.
**Início - 0002 - 06/12/2012.
** Verifica Hierarquia
*      CALL FUNCTION 'ZFSD_AUTORIZACAO_RESP_VENDAS'
*        EXPORTING
*          i_cod_resp   = wa_vbpa-kunnr
**         I_GJAHR      =
**         I_MONAT      =
*        EXCEPTIONS
*          no_authority = 1
*          OTHERS       = 2.
*      IF sy-subrc <> 0.
**        CONTINUE.
*      ENDIF.
**Fim - 0002 - 06/12/2012.
*      wa_final-codve = wa_vbpa-kunnr.
*      IF NOT p_vende IS INITIAL.
*        READ TABLE t_knvh WITH KEY customer = wa_vbpa-kunnr
*                          TRANSPORTING NO FIELDS.
*        IF sy-subrc = 4.
**          CONTINUE.
*        ENDIF.
*      ENDIF.

      CALL FUNCTION 'KNA1_READ_SINGLE'
        EXPORTING
          id_kunnr            = wa_vbpa-kunnr
        IMPORTING
          es_kna1             = wa_kna1_zh
        EXCEPTIONS
          not_found           = 1
          input_not_specified = 2
          OTHERS              = 3.
      IF sy-subrc = 0.
        wa_final-nom_ve = wa_kna1_zh-name1.
      ENDIF.

    ENDIF.

* Busca Material antigo
    READ TABLE ti_mara INTO wa_mara WITH KEY matnr = wa_lin-matnr.
    IF sy-subrc IS INITIAL.
      wa_final-bismt = wa_mara-bismt.
    ENDIF.

* Quantidade UC
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = wa_lin-matnr
        i_in_me              = wa_lin-meins
        i_out_me             = 'UC'
        i_menge              = wa_lin-menge
      IMPORTING
        e_menge              = vl_menge
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.
    IF sy-subrc = 0.
      wa_final-qtde_uc = vl_menge.
    ENDIF.


*Quantidade em caixas
*-> Alteração AZB/FENIX - 27.02.19 - SISTI 1522
*    READ TABLE t_vbap INTO wa_vbap WITH KEY vbeln = wa_vbrk-vbeln "wa_lin-refkey
*                                            posnr = wa_lin-itmnum.
*    IF sy-subrc IS INITIAL.
    PERFORM f_converter_cx USING    wa_lin-matnr
                                    wa_lin-menge
                                    wa_lin-meins
                           CHANGING wa_final-qtde_cu.
*      PERFORM f_converter_cx USING    wa_vbap-matnr
*                                      wa_vbap-kwmeng
*                                      wa_vbap-vrkme
*                             CHANGING wa_final-qtde_cu.
*    ENDIF.
*-> Fim da Alteração AZB/FENIX - 27.02.19 - SISTI 1522

* buscar descrição do grupo de mercadorias
    SELECT SINGLE wgbez
      FROM t023t
      INTO wa_final-wgbez
      WHERE spras EQ sy-langu
        AND matkl EQ wa_lin-matkl.
    IF NOT sy-subrc IS INITIAL.
      wa_final-wgbez = '...'.
    ENDIF.

* Familia Produto
    PERFORM f_busca_familia CHANGING wa_final-fam_prd
                                     wa_final-descfam.

    IF NOT p_atwtb IS INITIAL.
      IF p_atwtb <> wa_final-fam_prd.
*        CONTINUE.
      ENDIF.
    ENDIF.

* Buscar valor imposto IPI
    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'IPI3'.
    IF sy-subrc IS INITIAL.
      wa_final-ipi = wa_stx-taxval.
      CLEAR wa_stx.
    ENDIF.

* Buscar valor imposto vlr_st
    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICS3'.
    IF sy-subrc IS INITIAL.
      wa_final-vlr_st = wa_stx-taxval.
      CLEAR wa_stx.
    ENDIF.

* Buscar valor imposto icms
    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICM3'.
    IF sy-subrc IS INITIAL.
      wa_final-icms = wa_stx-taxval.
      CLEAR wa_stx.
    ENDIF.

*Bruno Barbosa - WAFX #272 - 18.01.2019 - Inicio
* Buscar valor imposto icfp
    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICFP'.
    IF sy-subrc IS INITIAL.
      wa_final-icfp = wa_stx-taxval.
      CLEAR wa_stx.
    ENDIF.
*Bruno Barbosa - WAFX #272 - 18.01.2019 - Fim

* Buscar valor imposto PIS
    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'IPSN'.
    IF sy-subrc IS INITIAL.
      wa_final-pis = wa_stx-taxval.
      CLEAR wa_stx.
    ENDIF.

* Buscar valor imposto Cofins
    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICON'.
    IF sy-subrc IS INITIAL.
      wa_final-cofins = wa_stx-taxval.
      CLEAR wa_stx.
    ENDIF.

* Buscar valor imposto 56.  ICMS Dedução ICZF
    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICZF'.
    IF sy-subrc IS INITIAL.
      wa_final-icms_de = wa_stx-taxval.
      CLEAR wa_stx.
    ENDIF.

*-> Alteração AZB/FENIX - 27.02.19 - SISTI 1522
    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICSC'.
    IF sy-subrc EQ 0 AND NOT wa_lin-netwr IS INITIAL.
      wa_final-icsc = wa_stx-taxval.
    ENDIF.

    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICAP'.
    IF sy-subrc EQ 0 AND NOT wa_lin-netwr IS INITIAL.
      wa_final-icap = wa_stx-taxval.
    ENDIF.

    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICEP'.
    IF sy-subrc EQ 0 AND NOT wa_lin-netwr IS INITIAL.
      wa_final-icep = wa_stx-taxval.
    ENDIF.

    READ TABLE ti_stx INTO wa_stx WITH KEY docnum = wa_lin-docnum
                                           itmnum = wa_lin-itmnum
                                           taxtyp = 'ICSP'.
    IF sy-subrc EQ 0 AND NOT wa_lin-netwr IS INITIAL.
      wa_final-icsp = wa_stx-taxval.
    ENDIF.

**-> Alteração AZB/FENIX - 18.03.19 - SISTI 1522 - Identificar Valores da KONV
*    IF NOT wa_vbrk-knumv IS INITIAL AND NOT wa_lin-itmnum IS INITIAL.
*      FREE lt_konv[].
*      CLEAR: wl_konv, vl_valor, vl_total.
**-> KONV
*      SELECT knumv
*             kposn
*             kschl
*             kwert
*             INTO TABLE lt_konv
*             FROM konv
*             WHERE knumv EQ wa_vbrk-knumv
*               AND kposn EQ wa_lin-itmnum.
*
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB10'.
*      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
*        vl_valor = abs( vl_valor ).
*        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
*      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB11'.
*      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
*        vl_valor = abs( vl_valor ).
*        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
*      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB12'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB13'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB14'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB15'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB16'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB17'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB18'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB19'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB20'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB21'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB22'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB23'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB24'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB25'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB26'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB27'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.
*      READ TABLE lt_konv INTO wl_konv WITH KEY knumv = wa_vbrk-knumv
*                                               kposn = wa_lin-itmnum
*                                               kschl = 'YB28'.
      IF sy-subrc EQ 0.
*        vl_valor = wl_konv-kwert.
        vl_valor = abs( vl_valor ).
        vl_total = vl_total + vl_valor.
*        CLEAR: wl_konv, vl_valor.
      ENDIF.

*    ENDIF.
*    ENDIF.

    wa_final-netwr = wa_vbrp-netwr   + wa_final-ipi  + wa_final-vlr_st + wa_final-icms_de + wa_final-icms +
                     wa_final-cofins + wa_final-pis  + vl_total        + wa_final-icsc    + wa_final-icap +
                     wa_final-icep   + wa_final-icsp + wa_final-icfp.

*    wa_final-netwr = wa_vbrp-netwr + wa_final-ipi  + wa_final-vlr_st + wa_final-icms_de + wa_final-icsc + wa_final-icap + wa_final-icep +
*-> Fim da Alteração AZB/FENIX - 27.02.19 - SISTI 1522

    APPEND wa_final TO ti_final.
    CLEAR: wa_final.
    ENDLOOP.
*ENDIF.
*ENDIF.
ENDFORM.                    " PROCESSAR_DADOS
*&---------------------------------------------------------------------*
*&      Form  F_EXIBE_DADOS
*&---------------------------------------------------------------------*
FORM f_exibe_dados .

  PERFORM f_novos_dados.    "WA Fabrica - Inicio - 26/08/2013

* Carregar Headers
  PERFORM f_carregar_headers.
  "Configurar Grid
  s_layout-no_input = 'X'.
  s_layout-colwidth_optimize = 'X'.
  s_layout-zebra = 'X'.

  IF p_vari IS NOT INITIAL
    AND s_varia-variant IS INITIAL.                         "Correct. 152159
    s_varia-variant = p_vari.
    s_varia-report  = sy-repid.
  ENDIF.

* Output of a simple list (single-line)
*  IF p_grava = space. "Só exibir ALV se não gravar arquivo
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_user_command = 'USER_COMMAND'
        is_layout               = s_layout
        it_fieldcat             = t_fieldcat
        i_callback_program      = sy-repid
        i_grid_title            = 'Relatório de Notas Fiscais'
        i_save                  = 'A'
        is_variant              = s_varia
      TABLES
        t_outtab                = ti_final
      EXCEPTIONS
        program_error           = 1
        OTHERS                  = 2.
*  ENDIF.

  IF NOT p_vari IS INITIAL.
    CALL FUNCTION 'REUSE_ALV_VARIANT_SELECT'
      EXPORTING
        i_dialog            = ''
        i_user_specific     = 'X'
        i_default           = ' '
        it_default_fieldcat = t_fieldcat
        i_layout            = s_layout
      IMPORTING
        es_layout           = s_layout
        et_fieldcat         = t_fieldcat
      CHANGING
        cs_variant          = s_varia
      EXCEPTIONS
        wrong_input         = 1
        fc_not_complete     = 2
        not_found           = 3
        program_error       = 4
        OTHERS              = 5.
  ENDIF.

ENDFORM.                    " F_EXIBE_DADOS
*&---------------------------------------------------------------------*
*&      Form  F_AJUSTE_VBRP
*&---------------------------------------------------------------------*
FORM f_ajuste_vbrp .
  FREE: ti_ajuste[].

  LOOP AT ti_vbrp INTO wa_vbrp.
    wa_ajuste-vbeln = wa_vbrp-aubel.
    APPEND wa_ajuste TO ti_ajuste.
  ENDLOOP.

  DELETE ADJACENT DUPLICATES FROM ti_ajuste COMPARING vbeln.

ENDFORM.                    " F_AJUSTE_VBRP

*----------------------------------------------------------------------*
*       Form  F_CARREGAR_HEADERS
*----------------------------------------------------------------------*
*       Carregar Headers do ALV
*----------------------------------------------------------------------*
FORM f_carregar_headers .


* Variáveis Locais
  DATA:
    wa_fieldcat TYPE slis_fieldcat_alv.

**  grid_set-edt_cll_cb = 'X'.

* Macros
  DEFINE m_fieldcat.

    wa_fieldcat-tabname       = 'TI_FINAL'.
    wa_fieldcat-fieldname     = &1.
    wa_fieldcat-ref_fieldname = &2.
    wa_fieldcat-ref_tabname   = &3.
    wa_fieldcat-seltext_m     = &4.
*Início 0001 - 05/01/12.
    wa_fieldcat-hotspot       = &5.
*Fim 0001 - 05/01/12.
    append wa_fieldcat to t_fieldcat.
    clear  wa_fieldcat.

  END-OF-DEFINITION.

* Limpar Tabela Interna de Headers
  CLEAR: t_fieldcat.

* Carregar Headers
  m_fieldcat:
*------------ ------------- -----------
*   FIELDNAME REF_FIELDNAME REF_TABNAME
*------------ ------------- -----------
    'DOCNUM'  'DOCNUM'  'J_1BNFDOC'  ''                     'X',
    'BUKRS'   'BUKRS'   'J_1BNFDOC'  ''                     '',
    'BRANCH'  'BRANCH'  'J_1BNFDOC'  ''                     '',
    'WERKS'   'WERKS'   'J_1BNFLIN'  ''                     '',
    'SPART'   'SPART'   'VBRP'       ''                     '',
*** >>> Inicio - [SHIVA] - FH/MCampos - 03.07.2015 09:33:31
*    'NFENUM'  'NFENUM'  'J_1BNFDOC'  ''                     '',
    'NFENUM'  'NFENUM'  'J_1BNFDOC'  'Nº NF-e'               '',
*** <<< Fim - [SHIVA] - FH/MCampos - 03.07.2015 09:33:31

    'NFNUM'   'NFNUM'   'J_1BNFDOC'  ''                     '',
    'SERIES'  'SERIES'  'J_1BNFDOC'  ''                     '',
    'GJAHR'   'GJAHR'   'J_1BNFDOC'  ''                     '',
    'PSTDAT'  'PSTDAT'  'J_1BNFDOC'  ''                     '',
    'DPTEN'   'DPTEN'   'VTTK'       ''                     '',
    'DATBG'   'DATBG'   'VTTK'       ''                     '',
    'DOCDAT'  'DOCDAT'  'J_1BNFDOC'  ''                     '',
    'NFTYPE'  'NFTYPE'  'J_1BNFDOC'  ''                     '',
    'NFTTXT'  'NFTTXT'  'J_1BAAT'    ''                     '',
    'DIRECT'  'DIRECT'  'J_1BNFDOC'  ''                     '',
    'CANCEL'  'CANCEL'  'J_1BNFDOC'  ''                     '',
    'CANDAT'  'CANDAT'  'J_1BNFDOC'  ''                     '',
    'DOCREF'  'DOCREF'  'J_1BNFLIN'  ''                     '',
    'NFENUM_ORIG'   ''  ''           'NF-e Origem'          '', "26/08/13
    'BSTKD'   'BSTKD'   'VBKD'       ''                     '',
    'N_PED'   'VBELN'   'VBAK'       ''                     '',
    'BSARK'   'BSARK'   'VBKD'       ''                     '',
    'FKART'   'FKART'   'VBRK'       ''                     '',
    'BEZEI'   ''        ''           'Motivo Ordem'         '', " Change: NNNNNNNNNN. Request: DEVKNNNNNN
    'ZTERM'   'ZTERM'   'VBRK'       ''                     '',
    'VTEXT'   'VTEXT'   'TVZBT'      ''                     '',
    'PARID'   'PARID'   'J_1BNFDOC'  ''                     '',
    'NAME1'   ''        ''           'Nome Cliente NF'      '',
    'CGC'     ''        ''           'CNPJ'                 '',
    'GRPCL'   ''        ''           'Grupo Cliente'        '',
    'KONZS'   'KONZS'   'KNA1'       ''                     '',
    'DESC_REDE'    ''   ''           'Rede'                 '',
    'ORT01'   'ORT01'   'J_1BNFDOC'  ''                     '',
    'REGIO'   'REGIO'   'KNA1'       ''                     '',
    'BRSCH'   'BRSCH'   'KNA1'       ''                     '',
    'BRAN1'   'BRAN1'   'KNA1'       ''                     '',
    'KATR4'   'KATR4'   'KNA1'       ''                     '',
    'CODVE'   ''        ''           'Cod. Vendedor/Repres' '',
    'NOM_VE'  ''        ''           'Nome Vendedor'        '',
    'TKNUM'   ''        ''           'Num. Transporte'      '', "26/08/13
    'TDLNR'   'TDLNR'   'VTTK'       ''                     '',
    'TRANS'   ''        ''           'Transportador'        '',
    'INCO1'   'INCO1'   'J_1BNFDOC'  ''                     '',
    'ITMNUM'  'ITMNUM'  'J_1BNFLIN'  ''                     '',
    'MATNR'   'MATNR'   'J_1BNFLIN'  ''                     '',
    'MAKTX'   'MAKTX'   'J_1BNFLIN'  ''                     '',
    'BISMT'   'BISMT'   'MARA'       ''                     '',
    'MENGE'   'MENGE'   'J_1BNFLIN'  ''                     '',
    'MEINS'   'MEINS'   'J_1BNFLIN'  ''                     '',
*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Inicio
    'QTDE_CX'  ''  '' 'Qtde.(CX / KG)'      '',
    'M_PADRAO' ''  '' 'U. padrão do produto' '',
*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Fim
    'QTDE_UC' ''        ''           'Quantidade UC'        '',
    'LOTE'    ''        ''           'Lote'                 '', "26/08/13
    'QTDE_CU' ''        ''           'Qtde. Cx Unitária'    '',
*--> Início DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
    'NTGEW'   'NTGEW'   'VBRP'       'Peso líquido'         '',
    'BRGEW'   'BRGEW'   'VBRP'       'Peso bruto'           '',
    'VOLUMES' ''        ''           'Volumes'              '',
*--> Fim DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
    'NBM'     'NBM'     'J_1BNFLIN'  ''                     '',
    'MATKL'   'MATKL'   'J_1BNFLIN'  ''                     '',
    'WGBEZ'   'WGBEZ'   'T023T'      ''                     '',
    'FAM_PRD' ''        ''           'Familia do Produto'   '',
    'DESCFAM' ''        ''           'Desc Familia'         '',
    'CFOP'    'CFOP'    'J_1BNFLIN'  ''                     '',
    'REFDOC'   ''        ''           'Referência Documento de Origem' '',
    'NETWR'   ''        ''           'Valor Total'          '',
    'WAERK'   'WAERK'   'J_1BNFDOC'  ''                     '',
    'IPI'     ''        ''           'IPI'                  '',
    'VLR_ST'  ''        ''           'Valor ST'             '',
    'ICMS'    ''        ''           'ICMS'                 '',
    'ICFP'    ''        ''           'ICFP'                 '', "Bruno Barbosa - WAFX #272 - 18.01.2019
    'PIS'     ''        ''           'PIS'                  '',
    'COFINS'  ''        ''           'COFINS'               '',
    'ICMS_DE' ''        ''           'ICMS Dedução'         '',
*-> Alteração AZB/FENIX - 27.02.19 - SISTI 1522
    'ICSC'    ''        ''           'ICSC'                 '',
    'ICAP'    ''        ''           'ICAP'                 '',
    'ICEP'    ''        ''           'ICEP'                 '',
    'ICSP'    ''        ''           'ICSP'                 '',
*-> Fim da Alteração AZB/FENIX - 27.02.19 - SISTI 1522
    'BOLETO'  ''        ''           'Boleto'               '',
    'PRECO_L' ''        ''           'Preço lista'          '',
    'DESCONT' ''        ''           'Desconto'             '',
*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Inicio
    'VALOR_ESTADO'   ''  ''  'ICMS estados'        '',
    'VALOR_PROBREZA' ''  ''  'Combate a pobreza'   ''.
*** WAFX: #690 Inclusão de colunas - 21.05.2019 - Fim
ENDFORM.                    " F_CARREGAR_HEADERS
*&---------------------------------------------------------------------*
*&      Form  F_BUSCA_FAMILIA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_WA_FINAL_FAM_PRD  text
*      <--P_WA_FINAL_DESCFAM  text
*----------------------------------------------------------------------*
FORM f_busca_familia  CHANGING p_fam_prd
                               p_descfam.
  DATA: vl_atinn TYPE ausp-atinn,
        wl_ausp  TYPE ausp.

  CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
    EXPORTING
      input  = text-003
    IMPORTING
      output = vl_atinn.

  SELECT SINGLE *
    FROM ausp
     INTO wl_ausp
     WHERE objek = wa_lin-matnr
    AND   atinn  = vl_atinn.
  IF sy-subrc = 0.
    p_fam_prd = wl_ausp-atwrt.
    CLEAR wa_cawnt.
    READ TABLE ti_cawnt INTO wa_cawnt WITH KEY atwrt = wl_ausp-atwrt
                                      BINARY SEARCH.
    IF sy-subrc = 0.
      p_descfam = wa_cawnt-atwtb.
    ENDIF.
  ENDIF.
ENDFORM.                    " F_BUSCA_FAMILIA
*&---------------------------------------------------------------------*
*&      Form  F_PREENCHE_FKART
*&---------------------------------------------------------------------*
*FORM f_preenche_fkart  USING p_tp_doc.
*
*  p_fkart-sign = 'I'.
*  p_fkart-option = 'EQ'.
*  p_fkart-low = p_tp_doc.
*  CLEAR p_fkart-high.
*  APPEND p_fkart.
*
*ENDFORM.                    " F_PREENCHE_FKART
*&---------------------------------------------------------------------*
*&      Form  F_MATCH_CODE_P_ATZHL
*&---------------------------------------------------------------------*
FORM f_match_code_p_atzhl .

  TYPES:
    BEGIN OF ty_cawnt,
      atwrt TYPE cawn-atwrt,
      atwtb TYPE cawnt-atwtb,
    END OF ty_cawnt.

  DATA:
    tl_cawnt TYPE TABLE OF ty_cawnt,
    vl_atinn TYPE ausp-atinn.

  CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
    EXPORTING
      input  = text-003
    IMPORTING
      output = vl_atinn.

  REFRESH tl_cawnt.

  SELECT cawn~atwrt
         cawnt~atwtb
    FROM cawn
    LEFT OUTER JOIN cawnt ON
      cawnt~atinn EQ cawn~atinn AND
      cawnt~atzhl EQ cawn~atzhl AND
      cawnt~adzhl EQ cawn~adzhl AND
      cawnt~spras EQ sy-langu
    INTO TABLE tl_cawnt
    WHERE cawn~atinn EQ vl_atinn.

  IF sy-subrc IS INITIAL.
    SORT tl_cawnt BY atwtb.
  ENDIF.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield    = 'ATWRT'
      dynpprog    = c_programa
      dynpnr      = sy-dynnr
      dynprofield = 'P_ATWTB'
      value_org   = 'S'
    TABLES
      value_tab   = tl_cawnt[].

ENDFORM.                    " F_MATCH_CODE_P_ATZHL
*&---------------------------------------------------------------------*
*&      Form  F_BUSCA_HIERARQUIA
*&---------------------------------------------------------------------*
FORM f_busca_hierarquia .

  DATA: node    TYPE bapikna1_knvh,
        vl_data TYPE sy-datum.

  IF NOT so_daten-low IS INITIAL.
    MOVE so_daten-low TO vl_data.
  ELSE.
    MOVE so_pstdt-low TO vl_data.
  ENDIF.

  CALL FUNCTION 'BAPI_CUSTOMER_GET_CHILDREN'
    EXPORTING
      valid_on   = vl_data
      custhityp  = 'Y' " Vendedores
*     NODE_LEVEL = '00'
      customerno = p_vende
*   IMPORTING
*     RETURN     =
    TABLES
      sales_area = t_area
      node_list  = t_knvh.

ENDFORM.                    " F_BUSCA_HIERARQUIA
*&---------------------------------------------------------------------*
*&      Form  F_POR_TRANSPORTE
*&---------------------------------------------------------------------*
FORM f_por_transporte .

  TYPES:
    BEGIN OF ty_vbrk_aux,
      refkey TYPE j_1bnflin-refkey,
    END OF ty_vbrk_aux,

    BEGIN OF ty_lips,
      vbeln TYPE lips-vbeln,
      posnr TYPE lips-posnr,
      vgbel TYPE lips-vgbel,
    END OF ty_lips.

  DATA:
    ti_vbrk_aux TYPE TABLE OF ty_vbrk_aux,
    ti_vbrp_aux TYPE TABLE OF ty_vbrp,
    ti_lin_aux  TYPE TABLE OF ty_lin,
    ti_lips     TYPE TABLE OF ty_lips.

  DATA:
   wa_vbrk_aux TYPE ty_vbrk_aux.

*******************************************************
  RANGES: lr_tp_out FOR vttk-shtyp.

  DATA: lt_tvarvc TYPE STANDARD TABLE OF tvarvc WITH HEADER LINE.

  CLEAR:  lt_tvarvc[].
  SELECT *
    FROM tvarvc
      INTO TABLE lt_tvarvc
        WHERE name = 'Z_REL_TP_OUT'.
*  IF NOT sy-subrc IS INITIAL.
*    MESSAGE i888(sabapdocu) DISPLAY LIKE 'I' WITH 'Cadastrar Z_REL_TP_OUT'(099).
*    LEAVE LIST-PROCESSING.
*    RETURN.
*  ENDIF.
  LOOP AT lt_tvarvc.
    lr_tp_out-low  = lt_tvarvc-low.
    lr_tp_out-high = lt_tvarvc-high.
    IF NOT lt_tvarvc-sign IS INITIAL AND
       NOT lt_tvarvc-opti IS INITIAL.
      lr_tp_out-sign   =  lt_tvarvc-sign.
      lr_tp_out-option =  lt_tvarvc-opti.
    ELSE.
      lr_tp_out-sign   = 'I'.
      lr_tp_out-option = 'EQ'.
    ENDIF.
    APPEND lr_tp_out.
    CLEAR  lr_tp_out.
  ENDLOOP.
*******************************************************

* Seleciona parametros TVARV
  SELECT low INTO TABLE ti_kalsm
    FROM tvarvc
    WHERE name = 'ZESQ_CALCULO'.
  IF sy-subrc IS INITIAL.
    SORT ti_kalsm BY kalsm .
  ENDIF.

  SELECT vbeln fkart zterm knumv kalsm "zzdpten
    FROM vbrk
    INTO TABLE ti_vbrk
    WHERE fkart IN p_fkart
* Início 0004 -10.02.2012 10:53:00 -  Luciano Soares.
    AND   vtweg IN  so_vtweg
    AND   vkorg IN so_vkorg.
* Fim 0004 -10.02.2012 10:53:04 -  Luciano Soares.
*      AND zzdpten IN so_daten.

  CHECK sy-subrc IS INITIAL. "IF sy-subrc IS INITIAL.
  SORT ti_vbrk BY vbeln.

*** >>> Inicio - [SHIVA] - FH/MCampos - 03.08.2015 09:34:51
  IF ti_vbrk[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 03.08.2015 09:34:51

    SELECT zterm vtext
      FROM tvzbt
      INTO TABLE ti_tvzbt
      FOR ALL ENTRIES IN ti_vbrk
      WHERE zterm EQ ti_vbrk-zterm
        AND spras EQ sy-langu.

    IF sy-subrc IS INITIAL.
      SORT ti_tvzbt BY zterm.
    ENDIF.

    SELECT vbeln posnr vgbel aubel vgpos spart ntgew brgew netwr "DEVK943244
           vrkme
      FROM vbrp
      INTO TABLE ti_vbrp
      FOR ALL ENTRIES IN ti_vbrk
      WHERE vbeln EQ ti_vbrk-vbeln
        AND werks  IN so_werks
* Início 0003 -19.01.2012 17:15:31 -  Luciano Soares.
        AND spart IN so_spart.
* Fim 0003 -19.01.2012 17:15:39 -  Luciano Soares.

    CHECK sy-subrc IS INITIAL. "IF sy-subrc = 0.
    SORT ti_vbrp BY vbeln.
    ti_vbrp_aux[] = ti_vbrp[].
    DELETE ADJACENT DUPLICATES FROM ti_vbrp_aux COMPARING vbeln.
*** >>> Inicio - [SHIVA] - FH/MCampos - 03.08.2015 09:40:54
    IF ti_vbrp[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 03.08.2015 09:40:54
      SELECT vbeln
             posnr
             matnr
             spart
             kzwi1
             kwmeng
             vrkme
             abgru
             ntgew
             brgew
         FROM vbap
        INTO TABLE t_vbap
        FOR ALL ENTRIES IN ti_vbrp
        WHERE vbeln   EQ ti_vbrp-aubel
          AND posnr   EQ ti_vbrp-vgpos.

      IF sy-subrc IS INITIAL.
        SORT t_vbap BY vbeln posnr.
      ENDIF.

      SELECT tknum tpnum vbeln
        FROM vttp
        INTO TABLE ti_vttp
        FOR ALL ENTRIES IN ti_vbrp
        WHERE vbeln EQ ti_vbrp-vgbel.
*** >>> Inicio - [SHIVA] - FH/MCampos - 03.08.2015 09:42:48
*  CHECK sy-subrc IS INITIAL. "IF sy-subrc IS INITIAL.
      IF ti_vttp[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 03.08.2015 09:42:48
        SORT ti_vttp BY tknum.

        SELECT tknum dpten datbg tdlnr"dtabf tdlnr                            "DEVK918744
          FROM vttk
          INTO TABLE ti_vttk
          FOR ALL ENTRIES IN ti_vttp
          WHERE tknum EQ ti_vttp-tknum
            AND tplst IN so_bukrs
            AND shtyp IN lr_tp_out. "AND shtyp = 'ZTRS'.

        SORT ti_vttk BY tknum.

        LOOP AT ti_vbrk INTO wa_vbrk.
          MOVE wa_vbrk-vbeln TO wa_vbrk_aux-refkey.
          APPEND wa_vbrk_aux TO ti_vbrk_aux.
        ENDLOOP.
*** >>> Inicio - [SHIVA] - FH/MCampos - 03.08.2015 09:43:41
        IF ti_vbrk_aux[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 03.08.2015 09:43:41
          SELECT docnum itmnum werks docref matnr maktx
                 menge  meins  matkl cfop  refkey netwr
                 nbm netdis
           FROM j_1bnflin
            INTO TABLE ti_lin
            FOR ALL ENTRIES IN ti_vbrk_aux
            WHERE refkey = ti_vbrk_aux-refkey
            AND matnr  IN so_matnr.
*** >>> Inicio - [SHIVA] - FH/MCampos - 03.08.2015 09:44:23
        ENDIF.
*  IF sy-subrc IS INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 03.08.2015 09:44:23
        SORT ti_lin  BY docnum itmnum.

        ti_lin_aux[] = ti_lin[].
        DELETE ADJACENT DUPLICATES FROM ti_lin_aux
                                   COMPARING docnum.
*** >>> Inicio - [SHIVA] - FH/MCampos - 03.08.2015 09:45:19
        IF ti_lin_aux[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 03.08.2015 09:45:19
          SELECT docnum nftype direct docdat pstdat series
                 nfnum  waerk  gjahr  bukrs  branch parid
                 cancel candat nfenum inco1
           FROM j_1bnfdoc
            INTO TABLE ti_doc
            FOR ALL ENTRIES IN ti_lin_aux
            WHERE docnum = ti_lin_aux-docnum
* Início 0004 -10.02.2012 10:50:25 -  Luciano Soares.
            AND   bukrs  IN so_bukrs
* Fim 0004 -10.02.2012 10:50:31 -  Luciano Soares.
            AND   nftype IN so_nftyp.
*** >>> Inicio - [SHIVA] - FH/MCampos - 03.08.2015 09:46:34
*    IF sy-subrc IS INITIAL.
          IF ti_doc[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 03.08.2015 09:46:34

            SORT ti_doc BY docnum.

            SELECT nftype nfttxt
             FROM j_1baat
              INTO TABLE ti_j_1baat
               FOR ALL ENTRIES IN ti_doc
               WHERE nftype EQ ti_doc-nftype
               AND spras  EQ sy-langu.
            IF sy-subrc IS INITIAL.
              SORT ti_j_1baat BY nftype.
            ENDIF.
            SELECT docnum itmnum taxtyp
                   base rate taxval
                    FROM j_1bnfstx
                    INTO TABLE ti_stx
                    FOR ALL ENTRIES IN ti_doc
                    WHERE docnum EQ ti_doc-docnum.
            IF sy-subrc IS INITIAL.
              SORT ti_stx BY docnum itmnum.
            ENDIF.
            SELECT hityp kunnr vkorg vtweg
                   spart datab datbi hkunnr
             FROM knvh
              INTO TABLE ti_knvh
               FOR ALL ENTRIES IN ti_doc
               WHERE kunnr = ti_doc-parid
               AND   hkunnr IN p_grpcli.
            IF sy-subrc = 0.
              SORT  ti_knvh BY kunnr hityp.
            ENDIF.
          ENDIF.

          PERFORM f_ajuste_vbrp.
*** >>> Inicio - [SHIVA] - FH/MCampos - 03.08.2015 09:41:29
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
*** <<< Fim - [SHIVA] - FH/MCampos - 03.08.2015 09:41:29
*** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:43:34
  IF ti_ajuste[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:43:34
    SELECT vbeln posnr bstkd bsark
     FROM vbkd
      INTO TABLE ti_vbkd
      FOR ALL ENTRIES IN ti_ajuste
      WHERE vbeln EQ ti_ajuste-vbeln.
    IF sy-subrc IS INITIAL.
      SORT ti_vbkd BY vbeln.
    ENDIF.
*** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:43:56
  ENDIF.
  IF ti_vbrp[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:43:56
    SELECT vbeln posnr vgbel
     FROM lips
      INTO TABLE ti_lips
       FOR ALL ENTRIES IN ti_vbrp
       WHERE vbeln = ti_vbrp-vgbel
       AND   posnr = ti_vbrp-vgpos.
*** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:46:39
  ENDIF.
*    IF sy-subrc = 0.
  IF ti_lips[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:46:39
    SORT ti_lips BY vbeln posnr.

    SELECT vbeln posnr parvw
           kunnr lifnr
      FROM vbpa
       INTO TABLE ti_vbpa
       FOR ALL ENTRIES IN ti_lips
       WHERE vbeln EQ ti_lips-vgbel.
    IF sy-subrc = 0.
      SORT ti_vbpa BY vbeln.
    ENDIF.
  ENDIF.
  ti_lin_aux[] = ti_lin[].
  DELETE ADJACENT DUPLICATES FROM ti_lin_aux COMPARING matnr.
*** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:45:29
  IF ti_lin_aux[] IS NOT INITIAL.
*** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:45:29
    SELECT matnr meins bismt
      FROM mara
      INTO TABLE ti_mara
      FOR ALL ENTRIES IN ti_lin_aux
      WHERE matnr EQ ti_lin_aux-matnr.
*** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:45:29
  ENDIF.
*** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:45:29
  IF sy-subrc IS INITIAL.
    SORT ti_mara BY matnr.
    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = text-003
      IMPORTING
        output = v_atinn.
    SELECT cawn~atwrt
            cawnt~atwtb
       FROM cawn
       LEFT OUTER JOIN cawnt ON
         cawnt~atinn EQ cawn~atinn AND
         cawnt~atzhl EQ cawn~atzhl AND
         cawnt~adzhl EQ cawn~adzhl AND
         cawnt~spras EQ sy-langu
       INTO TABLE ti_cawnt
       WHERE cawn~atinn EQ v_atinn.
    IF sy-subrc = 0.
      SORT ti_cawnt BY atwrt.
    ENDIF.
  ENDIF.
ENDFORM.                    " F_POR_TRANSPORTE
**&---------------------------------------------------------------------*
**&      Form  F_POR_TRANSPORTE
**&---------------------------------------------------------------------*
*FORM f_por_transporte .
*
*  TYPES:
*    BEGIN OF ty_vbrk_aux,
*     refkey TYPE j_1bnflin-refkey,
*    END OF ty_vbrk_aux,
*
*    BEGIN OF ty_lips,
*     vbeln TYPE lips-vbeln,
*     posnr TYPE lips-posnr,
*     vgbel TYPE lips-vgbel,
*    END OF ty_lips.
*
*  DATA:
*    ti_vbrk_aux TYPE TABLE OF ty_vbrk_aux,
*    ti_vbrp_aux TYPE TABLE OF ty_vbrp,
*    ti_lin_aux TYPE TABLE OF ty_lin,
*    ti_lips TYPE TABLE OF ty_lips.
*
*  DATA:
*   wa_vbrk_aux TYPE ty_vbrk_aux.
*
** Seleciona parametros TVARV
*  SELECT low INTO TABLE ti_kalsm
*    FROM tvarvc
*    WHERE name = 'ZESQ_CALCULO'.
*  IF sy-subrc IS INITIAL.
*    SORT ti_kalsm BY kalsm .
*  ENDIF.
*
**  SELECT tknum daten datbg tdlnr
*  SELECT tknum dpten datbg tdlnr
*    FROM vttk
*     INTO TABLE ti_vttk
**      WHERE daten IN so_daten
*      WHERE dpten IN so_daten
*      AND   tplst IN so_bukrs
*      AND   shtyp = 'ZTRS'.
*  IF sy-subrc IS INITIAL.
*    SORT ti_vttk BY tknum.
*
*    SELECT tknum tpnum vbeln
*      FROM vttp
*       INTO TABLE ti_vttp
*       FOR ALL ENTRIES IN ti_vttk
*       WHERE tknum EQ ti_vttk-tknum.
*    IF sy-subrc IS INITIAL.
*      SORT ti_vttp BY tknum.
*
*      SELECT vbeln posnr vgbel aubel vgpos
*        FROM vbrp
*         INTO TABLE ti_vbrp
*         FOR ALL ENTRIES IN ti_vttp
*         WHERE vgbel EQ ti_vttp-vbeln
*         AND werks  IN so_werks.
*      IF sy-subrc = 0.
*        SORT ti_vbrp BY vbeln.
*
*        ti_vbrp_aux[] = ti_vbrp[].
*        DELETE ADJACENT DUPLICATES FROM ti_vbrp_aux COMPARING vbeln.
*
*        SELECT vbeln fkart zterm knumv kalsm
*          FROM vbrk
*           INTO TABLE ti_vbrk
*           FOR ALL ENTRIES IN ti_vbrp_aux
*           WHERE vbeln EQ ti_vbrp_aux-vbeln
*           AND   fkart IN p_fkart.
*        IF sy-subrc IS INITIAL.
*          SORT ti_vbrk BY vbeln.
*
*          SELECT zterm vtext
*            FROM tvzbt
*             INTO TABLE ti_tvzbt
*             FOR ALL ENTRIES IN ti_vbrk
*             WHERE zterm EQ ti_vbrk-zterm
*             AND spras EQ sy-langu.
*
*          IF sy-subrc IS INITIAL.
*            SORT ti_tvzbt BY zterm.
*          ENDIF.
*
*          LOOP AT ti_vbrk INTO wa_vbrk.
*            MOVE wa_vbrk-vbeln TO wa_vbrk_aux-refkey.
*            APPEND wa_vbrk_aux TO ti_vbrk_aux.
*          ENDLOOP.
*
*          SELECT docnum itmnum werks docref matnr maktx
*                 menge  meins  matkl cfop  refkey netwr
*                 nbm netdis
*           FROM j_1bnflin
*            INTO TABLE ti_lin
*            FOR ALL ENTRIES IN ti_vbrk_aux
*            WHERE refkey = ti_vbrk_aux-refkey.
*          IF sy-subrc IS INITIAL.
*            SORT ti_lin  BY docnum itmnum.
*
*            ti_lin_aux[] = ti_lin[].
*            DELETE ADJACENT DUPLICATES FROM ti_lin_aux
*                                       COMPARING docnum.
*
*            SELECT docnum nftype direct docdat pstdat series
*                   nfnum  waerk  gjahr  bukrs  branch parid
**                   cancel candat name1 ort01 cgc nfenum inco1
*                   cancel candat nfenum inco1
*             FROM j_1bnfdoc
*              INTO TABLE ti_doc
*              FOR ALL ENTRIES IN ti_lin_aux
*              WHERE docnum = ti_lin_aux-docnum
*              and   nftype IN so_nftyp.
*            IF sy-subrc IS INITIAL.
*              SORT ti_doc BY docnum.
*
*              SELECT nftype nfttxt
*               FROM j_1baat
*                INTO TABLE ti_j_1baat
*                 FOR ALL ENTRIES IN ti_doc
*                 WHERE nftype EQ ti_doc-nftype
*                 AND spras  EQ sy-langu.
*              IF sy-subrc IS INITIAL.
*                SORT ti_j_1baat BY nftype.
*              ENDIF.
*              SELECT docnum itmnum taxtyp
*                     base rate taxval
*                      FROM j_1bnfstx
*                      INTO TABLE ti_stx
*                      FOR ALL ENTRIES IN ti_doc
*                      WHERE docnum EQ ti_doc-docnum.
*              IF sy-subrc IS INITIAL.
*                SORT ti_stx BY docnum itmnum.
*              ENDIF.
*              SELECT hityp kunnr vkorg vtweg
*                     spart datab datbi hkunnr
*               FROM knvh
*                INTO TABLE ti_knvh
*                 FOR ALL ENTRIES IN ti_doc
*                 WHERE kunnr = ti_doc-parid
*                 AND   hkunnr IN p_grpcli.
*              IF sy-subrc = 0.
*                SORT  ti_knvh BY kunnr hityp.
*              ENDIF.
*            ENDIF.
*
*            PERFORM f_ajuste_vbrp.
*
*            SELECT vbeln posnr bstkd bsark
*             FROM vbkd
*              INTO TABLE ti_vbkd
*              FOR ALL ENTRIES IN ti_ajuste
*              WHERE vbeln EQ ti_ajuste-vbeln.
*            IF sy-subrc IS INITIAL.
*              SORT ti_vbkd BY vbeln.
*            ENDIF.
*
*            SELECT vbeln posnr vgbel
*             FROM lips
*              INTO TABLE ti_lips
*               FOR ALL ENTRIES IN ti_vbrp
*               WHERE vbeln = ti_vbrp-vgbel
*               AND   posnr = ti_vbrp-vgpos.
*            IF sy-subrc = 0.
*              SORT ti_lips BY vbeln posnr.
*
*              SELECT vbeln posnr parvw
*                     kunnr lifnr
*                FROM vbpa
*                 INTO TABLE ti_vbpa
*                 FOR ALL ENTRIES IN ti_lips
*                 WHERE vbeln EQ ti_lips-vgbel.
*              IF sy-subrc = 0.
*                SORT ti_vbpa BY vbeln.
**                SELECT hityp kunnr vkorg vtweg
**                       spart datab datbi hkunnr
**                 FROM knvh
**                  INTO TABLE ti_knvh
**                   FOR ALL ENTRIES IN ti_vbpa
**                   WHERE kunnr = ti_vbpa-kunnr.
**                IF sy-subrc = 0.
**                  SORT  ti_knvh BY kunnr.
**                ENDIF.
*              ENDIF.
*            ENDIF.
*          ENDIF.
*          ti_lin_aux[] = ti_lin[].
*          DELETE ADJACENT DUPLICATES FROM ti_lin_aux COMPARING matnr.
*          SELECT matnr meins bismt
*            FROM mara
*            INTO TABLE ti_mara
*            FOR ALL ENTRIES IN ti_lin_aux
*            WHERE matnr EQ ti_lin_aux-matnr.
*          IF sy-subrc IS INITIAL.
*            SORT ti_mara BY matnr.
*            CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
*              EXPORTING
*                input  = text-003
*              IMPORTING
*                output = v_atinn.
*            SELECT cawn~atwrt
*                    cawnt~atwtb
*               FROM cawn
*               LEFT OUTER JOIN cawnt ON
*                 cawnt~atinn EQ cawn~atinn AND
*                 cawnt~atzhl EQ cawn~atzhl AND
*                 cawnt~adzhl EQ cawn~adzhl AND
*                 cawnt~spras EQ sy-langu
*               INTO TABLE ti_cawnt
*               WHERE cawn~atinn EQ v_atinn.
*            IF sy-subrc = 0.
*              SORT ti_cawnt BY atwrt.
*            ENDIF.
*          ENDIF.
*        ENDIF."VBRK
*      ENDIF."VBRP
*    ENDIF."VTTP
*  ENDIF."VTTK
**ENDIF.
*ENDFORM.                    " F_POR_TRANSPORTE
*&---------------------------------------------------------------------*
*&      Form  F_POR_NOTA_FISCAL
*&---------------------------------------------------------------------*
FORM f_por_nota_fiscal .

*******************************************************
  RANGES: lr_tp_out FOR vttk-shtyp.

  DATA: lt_tvarvc TYPE STANDARD TABLE OF tvarvc WITH HEADER LINE.

  CLEAR:  lt_tvarvc[].
  SELECT *
    FROM tvarvc
      INTO TABLE lt_tvarvc
        WHERE name = 'Z_REL_TP_OUT'.
*  IF NOT sy-subrc IS INITIAL.
*    MESSAGE i888(sabapdocu) DISPLAY LIKE 'I' WITH 'Cadastrar Z_REL_TP_OUT'(099).
*    LEAVE LIST-PROCESSING.
*    RETURN.
*  ENDIF.
  LOOP AT lt_tvarvc.
    lr_tp_out-low  = lt_tvarvc-low.
    lr_tp_out-high = lt_tvarvc-high.
    IF NOT lt_tvarvc-sign IS INITIAL AND
       NOT lt_tvarvc-opti IS INITIAL.
      lr_tp_out-sign   =  lt_tvarvc-sign.
      lr_tp_out-option =  lt_tvarvc-opti.
    ELSE.
      lr_tp_out-sign   = 'I'.
      lr_tp_out-option = 'EQ'.
    ENDIF.
    APPEND lr_tp_out.
    CLEAR  lr_tp_out.
  ENDLOOP.
*******************************************************

* Seleciona parametros TVARV
  SELECT low INTO TABLE ti_kalsm
    FROM tvarvc
    WHERE name = 'ZESQ_CALCULO'.
  IF sy-subrc IS INITIAL.
    SORT ti_kalsm BY kalsm .
  ENDIF.

  SELECT docnum
         nftype
         direct
         docdat
         pstdat
         series
         nfnum
         waerk
         gjahr
         bukrs
         branch
         parid
         cancel
         candat
         nfenum
         inco1
    FROM j_1bnfdoc
    INTO TABLE ti_doc
    WHERE nftype IN so_nftyp
      AND direct IN so_direc
      AND pstdat IN so_pstdt
      AND bukrs  IN so_bukrs
      AND branch IN so_branc
      AND parid  IN so_parid.
  IF sy-subrc IS INITIAL.
    SORT ti_doc BY docnum.

    SELECT docnum
           itmnum
           werks
           docref
           matnr
           maktx
           menge
           meins
           matkl
           cfop
           refkey
           netwr
           nbm
           netdis
      FROM j_1bnflin
      INTO TABLE ti_lin
      FOR ALL ENTRIES IN ti_doc
      WHERE docnum EQ ti_doc-docnum
        AND werks  IN so_werks
        AND matnr  IN so_matnr
        AND matkl  IN so_matkl.
    IF sy-subrc IS INITIAL.
      SORT ti_lin  BY docnum itmnum.

      PERFORM f_ajuste_lin.

      SELECT docnum
             itmnum
             taxtyp
             base
             rate
             taxval
        FROM j_1bnfstx
        INTO TABLE ti_stx
        FOR ALL ENTRIES IN ti_doc
        WHERE docnum EQ ti_doc-docnum.
      IF sy-subrc IS INITIAL.
        SORT ti_stx BY docnum itmnum.
      ENDIF.

    ENDIF.
**** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:36:43
*      IF ti_ajuste IS NOT INITIAL.
**** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:36:43
*        SELECT vbeln
*               fkart
*               zterm
*               knumv
*               kalsm
*               "zzdpten
*          FROM vbrk
*          INTO TABLE ti_vbrk
*          FOR ALL ENTRIES IN ti_ajuste
*          WHERE vbeln EQ ti_ajuste-vbeln
** Início 0004 -10.02.2012 10:53:00 -  Luciano Soares.
*          AND   vtweg IN  so_vtweg
*          AND   vkorg IN so_vkorg
** Fim 0004 -10.02.2012 10:53:04 -  Luciano Soares.
*          AND   fkart IN p_fkart.
**** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:37:24
*      ENDIF.
**** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:37:24
*      IF sy-subrc IS INITIAL.
*        SORT ti_vbrk BY vbeln.
*
*        SELECT vbeln
*               posnr
*               vgbel
*               aubel
** Início 0003 -19.01.2012 17:28:54 -  Luciano Soares.
*               vgpos
*               spart
** Fim 0003 -19.01.2012 17:29:12 -  Luciano Soares.
**--> Início DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
*               ntgew
*               brgew
*               netwr
**--> Fim DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
*               vrkme
*          FROM vbrp
*          INTO TABLE ti_vbrp
*          FOR ALL ENTRIES IN ti_vbrk
*          WHERE vbeln EQ ti_vbrk-vbeln
** Início 0003 -19.01.2012 17:15:31 -  Luciano Soares.
*          AND spart IN so_spart.
** Fim 0003 -19.01.2012 17:15:39 -  Luciano Soares.
*
*        IF sy-subrc IS INITIAL.
*          SORT ti_vbrp BY vbeln.
*
*          SELECT vbeln
*                 posnr
*                 matnr
*                 spart
*                 kzwi1
*                 kwmeng
*                 vrkme
*                 abgru
*                 ntgew
*                 brgew
*            FROM vbap
*            INTO TABLE t_vbap
*            FOR ALL ENTRIES IN ti_vbrp
*        WHERE vbeln   EQ ti_vbrp-aubel
*          AND posnr   EQ ti_vbrp-vgpos.
*          IF sy-subrc IS INITIAL.
*            SORT t_vbap BY vbeln posnr.
*          ENDIF.
*
*          PERFORM f_ajuste_vbrp.
**** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:38:04
*          IF ti_ajuste[] IS NOT INITIAL.
**** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:38:04
*            SELECT vbeln
*                   posnr
*                   bstkd
*                   bsark
*              FROM vbkd
*              INTO TABLE ti_vbkd
*              FOR ALL ENTRIES IN ti_ajuste
*              WHERE vbeln EQ ti_ajuste-vbeln.
*            IF sy-subrc IS INITIAL.
*              SORT ti_vbkd BY vbeln.
*            ENDIF.
**** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:38:57
*          ENDIF.
**** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:38:57
** descrição da cond pgto
*          SELECT zterm
*                 vtext
*            FROM tvzbt
*            INTO TABLE ti_tvzbt
*            FOR ALL ENTRIES IN ti_vbrk
*            WHERE zterm EQ ti_vbrk-zterm
*              AND spras EQ sy-langu.
*
*          IF sy-subrc IS INITIAL.
*            SORT ti_tvzbt BY zterm.
*          ENDIF.
*
*          SELECT tknum tpnum vbeln
*               FROM vttp
*                INTO TABLE ti_vttp
*                FOR ALL ENTRIES IN ti_vbrp
*                WHERE vbeln EQ ti_vbrp-vgbel.
*          IF sy-subrc IS INITIAL.
*            SORT ti_vttp BY tknum.
*
**            SELECT tknum daten datbg tdlnr
*            SELECT tknum dpten dtabf tdlnr "datbg tdlnr                  "DEVK918744
*               FROM vttk
*                INTO TABLE ti_vttk
*                FOR ALL ENTRIES IN ti_vttp
*                 WHERE tknum = ti_vttp-tknum
*                 AND shtyp IN lr_tp_out. "AND   shtyp = 'ZTRS'.
*            IF sy-subrc IS INITIAL.
*              SORT ti_vttk BY tknum.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDIF.
**** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:39:39
*      IF ti_ajuste[] IS NOT INITIAL.
**** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:39:39
*        SELECT vbeln
*               posnr
*               parvw
*               kunnr
*               lifnr
*          FROM vbpa
*          INTO TABLE ti_vbpa
*          FOR ALL ENTRIES IN ti_ajuste
*          WHERE vbeln EQ ti_ajuste-vbeln.
**** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:40:09
*      ENDIF.
**** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:40:09
*      IF sy-subrc IS INITIAL.
*        SORT ti_vbpa BY vbeln.
*      ENDIF.
*
*      ti_lin_aux[] = ti_lin[].
*      DELETE ADJACENT DUPLICATES FROM ti_lin_aux COMPARING matnr.
**** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:40:36
*      IF ti_lin_aux[] IS NOT INITIAL.
**** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:40:36
*        SELECT matnr
*               meins
*               bismt
*          FROM mara
*          INTO TABLE ti_mara
*          FOR ALL ENTRIES IN ti_lin_aux
*          WHERE matnr EQ ti_lin_aux-matnr.
**** >>> Inicio - [SHIVA] - FH/MCampos - 20.07.2015 09:41:04
*      ENDIF.
**** <<< Fim - [SHIVA] - FH/MCampos - 20.07.2015 09:41:04
*      IF sy-subrc IS INITIAL.
*        SORT ti_mara BY matnr.
*        CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
*          EXPORTING
*            input  = text-003
*          IMPORTING
*            output = v_atinn.
*        SELECT cawn~atwrt
*                cawnt~atwtb
*           FROM cawn
*           LEFT OUTER JOIN cawnt ON
*             cawnt~atinn EQ cawn~atinn AND
*             cawnt~atzhl EQ cawn~atzhl AND
*             cawnt~adzhl EQ cawn~adzhl AND
*             cawnt~spras EQ sy-langu
*           INTO TABLE ti_cawnt
*           WHERE cawn~atinn EQ v_atinn.
*        IF sy-subrc = 0.
*          SORT ti_cawnt BY atwrt.
*        ENDIF.
*      ENDIF.
*
*      SELECT nftype
*             nfttxt
*        FROM j_1baat
*        INTO TABLE ti_j_1baat
*        FOR ALL ENTRIES IN ti_doc
*        WHERE nftype EQ ti_doc-nftype
*          AND spras  EQ sy-langu.
*      IF sy-subrc IS INITIAL.
*        SORT ti_j_1baat BY nftype.
*      ENDIF.
*    ENDIF.
*    SELECT hityp kunnr vkorg vtweg
*           spart datab datbi hkunnr
*     FROM knvh
*      INTO TABLE ti_knvh
*       FOR ALL ENTRIES IN ti_doc
*       WHERE kunnr = ti_doc-parid
*       AND   hkunnr IN p_grpcli.
*    IF sy-subrc = 0.
*      SORT  ti_knvh BY kunnr hityp.
*    ENDIF.
*  ENDIF.

  SELECT bukrs
         branch
    FROM j_1bbranch
    INTO TABLE ti_branch
    WHERE branch IN so_branc.
  IF sy-subrc IS INITIAL.
    SORT ti_branch BY  bukrs.
  ENDIF.

  SELECT vkorg
    FROM tvko
    INTO TABLE ti_tvko
    WHERE vkorg IN so_vkorg.

  IF sy-subrc IS INITIAL.
    SORT ti_tvko BY vkorg.
  ENDIF.

  SELECT *
    FROM tvfkt
    INTO TABLE ti_tvfkt
    WHERE fkart EQ p_fkart .
  IF sy-subrc IS INITIAL.
    SORT ti_tvfkt BY fkart.
  ENDIF.

  SELECT *
    FROM t005s
    INTO TABLE ti_t005s_2
    WHERE bland EQ p_bland.
  IF sy-subrc IS INITIAL.
    SORT ti_t005s BY bland.
  ENDIF.

  ENDIF.

ENDFORM.                    " F_POR_NOTA_FISCAL
*&---------------------------------------------------------------------*
*&      Form  F_PREENCHE_BRANC
*&---------------------------------------------------------------------*
FORM f_preenche_branc  USING    p_bukrs.

  TYPES: BEGIN OF ty_branch,
           bukrs  TYPE j_1bbranch-bukrs,
           branch TYPE j_1bbranch-branch,
         END OF ty_branch.

  DATA:
    tl_branch TYPE TABLE OF ty_branch,
    wl_branch TYPE ty_branch.

  SELECT bukrs branch
    INTO TABLE tl_branch
      FROM j_1bbranch
       WHERE bukrs = p_bukrs.
  IF sy-subrc = 0.
    LOOP AT tl_branch INTO wl_branch.
      so_branc-sign = 'I'.
      so_branc-option = 'EQ'.
      so_branc-low = wl_branch-branch.
      CLEAR so_branc-high.
      APPEND so_branc.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " F_PREENCHE_BRANC
*&---------------------------------------------------------------------*
*&      Form  F_PREENCHE_NFTYP
*&---------------------------------------------------------------------*
*FORM f_preenche_nftyp  USING    p_nftype.
*
*  so_nftyp-sign = 'I'.
*  so_nftyp-option = 'EQ'.
*  so_nftyp-low = p_nftype.
*  CLEAR so_nftyp-high.
*  APPEND so_nftyp.
*
*ENDFORM.                    " F_PREENCHE_NFTYP
*&---------------------------------------------------------------------*
*&      Form  F_PREENCHE_DIRECT
*&---------------------------------------------------------------------*
*FORM f_preenche_direct  USING    p_direct.
*
*  so_direc-sign = 'I'.
*  so_direc-option = 'EQ'.
*  so_direc-low = p_direct.
*  CLEAR so_direc-high.
*  APPEND so_direc.
*
*ENDFORM.                    " F_PREENCHE_DIRECT
*Início - 05/01/12.
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND
*&---------------------------------------------------------------------*
FORM user_command USING r_ucomm LIKE sy-ucomm
                  rs_selfield TYPE slis_selfield.
* Check function code
  CASE r_ucomm.
    WHEN '&IC1'.
      IF rs_selfield-fieldname = 'DOCNUM'.
        CLEAR: wa_final.
        READ TABLE ti_final INTO wa_final INDEX rs_selfield-tabindex.
        IF sy-subrc = 0.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = wa_final-docnum
            IMPORTING
              output = wa_final-docnum.

*     Set parameter ID for transaction screen field
          SET PARAMETER ID 'JEF' FIELD wa_final-docnum.
          CALL TRANSACTION 'J1B3N' AND SKIP FIRST SCREEN.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDFORM.                    " USER_COMMAND
*Fim - 05/01/12.
*&---------------------------------------------------------------------*
*&      Form  F_CONVERTER_CX
*&---------------------------------------------------------------------*
FORM f_converter_cx  USING    p_matnr     TYPE matnr
                              p_in_menge  TYPE p
                              p_in_me     TYPE meins
                     CHANGING p_out_menge TYPE p.
  DATA: l_menge TYPE menge_d.
  l_menge = p_in_menge.

  IF p_in_me NE 'KI' AND
     p_matnr IS NOT INITIAL.
    CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
      EXPORTING
        i_matnr              = p_matnr
        i_in_me              = p_in_me
        i_out_me             = 'KI'     "Caixa
        i_menge              = l_menge
      IMPORTING
        e_menge              = l_menge
      EXCEPTIONS
        error_in_application = 1
        error                = 2
        OTHERS               = 3.
    IF sy-subrc <> 0.
      CLEAR l_menge.
    ENDIF.
  ENDIF.

  p_out_menge = l_menge.

ENDFORM.                    " F_CONVERTER_CX
*&---------------------------------------------------------------------*
*&      Form  F_NOVOS_DADOS
*&---------------------------------------------------------------------*
FORM f_novos_dados .

  FIELD-SYMBOLS: <fs_lips> TYPE lips.
  DATA: l_index       TYPE sy-tabix.

  IF ti_final[] IS NOT INITIAL.
    SELECT docnum
           nftype
           direct
           docdat
           pstdat
           series
           nfnum
           waerk
           gjahr
           bukrs
           branch
           parid
           cancel
           candat
           nfenum
           inco1
    INTO TABLE ti_doc_new
    FROM j_1bnfdoc
    FOR ALL ENTRIES IN ti_final
    WHERE docnum = ti_final-docref.

    IF sy-subrc = 0.
      SORT ti_doc_new BY docnum.
    ENDIF.

    SELECT vbeln
           posnr
           vgbel
           aubel
           vgpos
           spart
*--> Início DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
           ntgew
           brgew
           netwr
           vrkme
*--> Fim DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
    INTO TABLE ti_vbrp_new
    FROM vbrp
    FOR ALL ENTRIES IN ti_final
    WHERE vbeln = ti_final-refdoc.
  ENDIF.

  IF ti_vbrp_new IS NOT INITIAL.
    SORT ti_vbrp_new BY vbeln posnr.

    SELECT tknum
           tpnum
           vbeln
    INTO TABLE ti_vttp_new
    FROM vttp
    FOR ALL ENTRIES IN ti_vbrp_new
    WHERE vbeln = ti_vbrp_new-vgbel.

    IF sy-subrc = 0.
      SORT ti_vttp_new BY vbeln.
    ENDIF.

    SELECT *
    INTO TABLE ti_lips
    FROM lips
    FOR ALL ENTRIES IN ti_vbrp_new
    WHERE vbeln = ti_vbrp_new-vgbel.

    IF sy-subrc = 0.
      SORT ti_lips BY vbeln posnr.
    ENDIF.
  ENDIF.

* WA Fabrica - 01/11/2013 - Inicio
  DELETE ti_lips WHERE charg IS INITIAL.
  LOOP AT ti_lips ASSIGNING <fs_lips>.
    IF <fs_lips>-uecha IS NOT INITIAL.
      <fs_lips>-posnr = <fs_lips>-uecha.
    ENDIF.
  ENDLOOP.
  SORT ti_lips BY vbeln posnr.
* WA Fabrica - 01/11/2013 - Fim

  LOOP AT ti_final INTO wa_final.

    l_index = sy-tabix.

    CLEAR: wa_final-nfenum_orig, wa_final-tknum, wa_final-lote.

    READ TABLE ti_doc_new INTO wa_doc_new
              WITH KEY docnum = wa_final-docref BINARY SEARCH.
    IF sy-subrc = 0.
      wa_final-nfenum_orig = wa_doc_new-nfenum.
    ENDIF.

    READ TABLE ti_vbrp_new INTO wa_vbrp_new
              WITH KEY vbeln = wa_final-refdoc
* WA Fabrica - 01/11/2013 - Inicio
                       posnr = wa_final-itmnum BINARY SEARCH.
* WA Fabrica - 01/11/2013 - Fim
    IF sy-subrc = 0.
      READ TABLE ti_vttp_new INTO wa_vttp_new
              WITH KEY vbeln = wa_vbrp_new-vgbel.
      IF sy-subrc = 0.
        wa_final-tknum = wa_vttp_new-tknum.
      ENDIF.

      READ TABLE ti_lips TRANSPORTING NO FIELDS
              WITH KEY vbeln = wa_vbrp_new-vgbel
* WA Fabrica - 01/11/2013 - Inicio
                       posnr = wa_vbrp_new-posnr
* WA Fabrica - 01/11/2013 - Fim
              BINARY SEARCH.
      IF sy-subrc = 0.
        LOOP AT ti_lips INTO wa_lips FROM sy-tabix.
          IF wa_lips-vbeln <> wa_vbrp_new-vgbel OR
* WA Fabrica - 01/11/2013 - Inicio
             wa_lips-posnr <> wa_vbrp_new-vgpos.
* WA Fabrica - 01/11/2013 - Fim
            EXIT.
          ENDIF.
          IF wa_lips-posnr = wa_vbrp_new-vgpos OR
             wa_lips-uecha = wa_vbrp_new-vgpos.
            CONCATENATE wa_final-lote wa_lips-charg INTO wa_final-lote
                          SEPARATED BY '/'.
          ENDIF.
        ENDLOOP.
        IF wa_final-lote IS NOT INITIAL.
          wa_final-lote = wa_final-lote+1.
        ENDIF.
      ENDIF.

    ENDIF.

    MODIFY ti_final FROM wa_final INDEX l_index
              TRANSPORTING nfenum_orig tknum lote.

  ENDLOOP.

*--> Início DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244
  DELETE ti_final WHERE NOT tknum IN so_tknum.
*--> Fim DSR - Inclusão de campos no relatório de notas fiscais - 18.09.2018 DEVK943244

ENDFORM.                    " F_NOVOS_DADOS
*&---------------------------------------------------------------------*
*&      Form  F_DOWNLOAD_ARQUIVO
*&---------------------------------------------------------------------*
*FORM f_download_arquivo.
*
*  DATA: v_perc  TYPE f,
*        v_arqui TYPE string,
*        v_subrc TYPE sy-subrc.
*
*  PER
*FORM f_prepara_arquivo.
*
*  v_perc = 80.
*  PERFORM f_reloginho USING v_perc text-009.
*
*  IF p_loc = 'X'. "Local
*
*    v_arqui = p_dire.
*
**    IF v_arqui IS INITIAL.
**      MESSAGE i888(sabapdocu) DISPLAY LIKE 'I' WITH text-010.
**      LEAVE LIST-PROCESSING.
**    ENDIF.
*
*    CALL FUNCTION 'GUI_DOWNLOAD'
*      EXPORTING
*        filename                = v_arqui
*        filetype                = 'ASC'
*      TABLES
*        data_tab                = t_arquivo
*      EXCEPTIONS
*        file_write_error        = 1
*        no_batch                = 2
*        gui_refuse_filetransfer = 3
*        invalid_type            = 4
*        no_authority            = 5
*        unknown_error           = 6
*        header_not_allowed      = 7
*        separator_not_allowed   = 8
*        filesize_not_allowed    = 9
*        header_too_long         = 10
*        dp_error_create         = 11
*        dp_error_send           = 12
*        dp_error_write          = 13
*        unknown_dp_error        = 14
*        access_denied           = 15
*        dp_out_of_memory        = 16
*        disk_full               = 17
*        dp_timeout              = 18
*        file_not_found          = 19
*        dataprovider_exception  = 20
*        control_flush_error     = 21
*        OTHERS                  = 22.
*
**    IF sy-subrc = 0.
**      MESSAGE i888(sabapdocu) WITH text-011.
**    ELSE.
**      MESSAGE i888(sabapdocu) DISPLAY LIKE 'E' WITH text-005.
**      LEAVE LIST-PROCESSING.
**    ENDIF.
*
*  ELSE.
*    IF so_daten[] IS NOT INITIAL.
*      CONCATENATE p_arqe             'VENDA_'          so_daten-low+6(2)
*                  so_daten-low+4(2)  so_daten-low+2(2) '.txt'
*             INTO p_arqe.
*    ELSEIF so_pstdt[] IS NOT INITIAL.
*      CONCATENATE p_arqe             'DEVOLUCAO_'      so_pstdt-low+6(2)
*                  so_pstdt-low+4(2)  so_pstdt-low+2(2) '.txt'
*             INTO p_arqe.
*    ELSE.
*      CONCATENATE p_arqe          'NOTAFISCAL.txt'          INTO p_arqe.
*    ENDIF.
*
*    OPEN DATASET p_arqe FOR OUTPUT IN TEXT MODE ENCODING NON-UNICODE.
*
*    CLEAR: v_subrc.
*    v_subrc = sy-subrc.
*
*    IF v_subrc = 0.
*
*      LOOP AT t_arquivo INTO wa_arquivo.
*
*        CATCH SYSTEM-EXCEPTIONS dataset_not_open = 0 .
*
*          TRANSFER wa_arquivo-linha TO p_arqe.
*
*        ENDCATCH.
*
*      ENDLOOP.
*
*      CLOSE DATASET p_arqe.
*
*      "Alterando a permissão do arquivo
*      DATA: v_comando(1000)        TYPE c.
*      CONCATENATE 'chmod 777' p_arqe INTO v_comando SEPARATED BY space.
*      CALL 'SYSTEM' ID 'COMMAND' FIELD v_comando.
*
*    ENDIF.
*
**    IF v_subrc EQ 0.
**      MESSAGE i888(sabapdocu) WITH text-011.
**    ELSE.
**      MESSAGE i888(sabapdocu) DISPLAY LIKE 'E' WITH text-012.
**      LEAVE LIST-PROCESSING.
**    ENDIF.
**
*  ENDIF.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_PREPARA_ARQUIVO
*&---------------------------------------------------------------------*
*FORM f_prepara_arquivo.
*
*  DATA:
*    wa_fieldcat TYPE slis_fieldcat_alv.
*
*  DATA: v_campo(200)  TYPE c,
*        v_menge(20)   TYPE c,
*        v_qtde_uc(20) TYPE c,
*        v_qtde_cu(20) TYPE c,
*        v_netwr(20)   TYPE c,
*        v_ipi(20)     TYPE c,
*        v_vlr_st(20)  TYPE c,
*        v_icms(20)    TYPE c,
*        v_pis(20)     TYPE c,
*        v_cofins(20)  TYPE c,
*        v_icms_de(20) TYPE c,
*        v_boleto(20)  TYPE c,
*        v_preco_l(20) TYPE c,
*        v_descont(20) TYPE c.
*
*  FIELD-SYMBOLS <fs_concat> TYPE any.
*
*  DELETE t_fieldcat WHERE no_out EQ 'X'.
*  SORT t_fieldcat BY col_pos.
*
*  LOOP AT ti_final INTO wa_final.
*
*    LOOP AT t_fieldcat INTO wa_fieldcat.
*
*      ASSIGN COMPONENT wa_fieldcat-fieldname OF STRUCTURE wa_final TO <fs_concat>.
*      IF sy-subrc EQ 0.
*        v_campo = <fs_concat>.
*        SHIFT v_campo LEFT DELETING LEADING space.
*        IF wa_arquivo-linha IS INITIAL.
*          wa_arquivo-linha = v_campo.
*        ELSE.
*          CONCATENATE wa_arquivo-linha v_campo INTO wa_arquivo-linha SEPARATED BY c_barra.
*        ENDIF.
*      ENDIF.
*
*    ENDLOOP.
*
*    APPEND wa_arquivo TO t_arquivo.
*    CLEAR wa_arquivo.
*
*  ENDLOOP.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_RELOGINHO
*&---------------------------------------------------------------------*
FORM f_reloginho  USING p_perc
                        p_msg.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      percentage = p_perc
      text       = p_msg
    EXCEPTIONS
      OTHERS     = 1.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_SELECT_VARIAVEL_ALV
*&---------------------------------------------------------------------*
FORM f_select_variavel_alv .

  s_varia-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant    = s_varia
      i_save        = 'A'
    IMPORTING
      es_variant    = s_varia
    EXCEPTIONS
      not_found     = 1
      program_error = 2
      OTHERS        = 3.

  IF sy-subrc IS INITIAL.
    p_vari = s_varia-variant.
  ENDIF.

ENDFORM.                    " F_SELECT_VARIAVEL_ALV

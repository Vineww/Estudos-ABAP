*&---------------------------------------------------------------------*
*& Report  Z_SD_CARGA_01
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ZSD_CARGA_01.

TYPE-POOLS: slis.

TABLES zsd_clientes_log.

TYPES:
t_fieldcat TYPE slis_fieldcat_alv,
t_events   TYPE slis_alv_event,
t_layout   TYPE slis_layout_alv.

DATA: w_fieldcat TYPE t_fieldcat,
      w_events   TYPE t_events,
      w_layout   TYPE t_layout.

DATA: i_fieldcat TYPE STANDARD TABLE OF t_fieldcat,
      i_events   TYPE STANDARD TABLE OF t_events.

DATA: v_allowed_char(200)      TYPE c,
      v_allowed_char_aux(200)  TYPE c.

TYPES:
  BEGIN OF tp_upload,
    line TYPE string,
  END OF tp_upload,

  BEGIN OF tp_carga,
    stcd1     TYPE kna1-stcd1,
    street    TYPE adrc-street,
    city1     TYPE adrc-city1,
    city2     TYPE adrc-city2,
    city_code TYPE adrc-city_code,
  END OF tp_carga,

BEGIN OF tp_adrc,
  street    TYPE adrc-street,
  city1     TYPE adrc-city1,
  city2     TYPE adrc-city2,
  city_code TYPE adrc-city_code,
  END OF tp_adrc,

  BEGIN OF tp_final,
    stcd1         TYPE kna1-stcd1,
    street        TYPE adrc-street,
    city1         TYPE adrc-city1,
    city2         TYPE adrc-city2,
    city_code     TYPE adrc-city_code,
    f_stcd1       TYPE kna1-stcd1,
    f_street      TYPE adrc-street,
    f_city1       TYPE adrc-city1,
    f_city2       TYPE adrc-city2,
    f_city_code   TYPE adrc-city_code,
   END OF tp_final.

DATA: lt_file  TYPE TABLE OF tp_upload,
      ls_file  LIKE LINE OF lt_file,
      lt_carga TYPE TABLE OF tp_carga,
      ls_carga LIKE LINE OF lt_carga,
      t_grid1 TYPE REF TO cl_gui_alv_grid.

DATA: lt_filetable TYPE filetable,
      lv_filetable LIKE LINE OF lt_filetable,
      lv_file      TYPE string,
      lv_rc        TYPE i,
      lv_tabix     TYPE ad_consnum,
      lv_consnumb  TYPE ad_consnum,
      lv_email     TYPE string,
      lv_remark    TYPE string,
      lv_msg       TYPE string.

DATA: v_objty   TYPE ad_ownertp,
      v_objid   TYPE ad_objkey,
      v_contx   TYPE ad_context VALUE '0001',
      v_addnr   TYPE ad_addrnum,
      v_retcode TYPE ad_retcode.

DATA: t_adsmtp   TYPE TABLE OF bapiadsmtp,
      s_adsmtp   LIKE LINE  OF t_adsmtp,
      t_adsmtp_n TYPE TABLE OF bapiadsmtp,
      t_adsmtp_x TYPE TABLE OF bapiadsmtx,
      t_adrcomc  TYPE TABLE OF adrcomc,
      lt_return  TYPE TABLE OF bapiret2   WITH HEADER LINE,
      t_return   TYPE          bapiret2_t,
      t_adrc     TYPE TABLE OF adrc,
      wa_t_adrc  LIKE LINE OF  t_adrc.

DATA: lv_adrnr TYPE kna1-adrnr.

DATA: ti_adrc TYPE TABLE OF tp_adrc,
      wa_adrc  LIKE LINE OF ti_adrc.

DATA: ti_final TYPE TABLE OF tp_final,
      wa_final LIKE LINE  OF ti_final.

DATA: t_alv_table TYPE REF TO cl_salv_table.

DATA: v_adrnr            TYPE ADDR1_SEL-ADDRNUMBER,
      wa_addr1_complete  TYPE SZADR_ADDR1_COMPLETE,
      gs_addr1           TYPE szadr_addr1_line.

DATA: t_bapiad1vl   TYPE TABLE OF bapiad1vl,
      t_bapiad1vl_x TYPE TABLE OF bapiad1vlx.

DATA: ti_kna1 TYPE TABLE OF kna1,
      wa_kna1 LIKE LINE  OF ti_kna1.

DATA:  t_clientes_log  TYPE TABLE OF zsd_clientes_log,
       wa_clientes_log LIKE LINE OF t_clientes_log.

DATA: lv_user_id TYPE sy-uname,
      lv_date    TYPE sy-datum,
      lv_time    TYPE sy-uzeit.

FIELD-SYMBOLS: <fs_adrt>         TYPE         adrt,
               <fs_t_bapiad1vl>  LIKE LINE OF t_bapiad1vl,
               <fs_t_bapiad1vlx> LIKE LINE OF t_bapiad1vl_x.

FIELD-SYMBOLS: <fs_adsmtp> LIKE LINE OF t_adsmtp_n,
               <fs_adsmtx> LIKE LINE OF t_adsmtp_x.

SELECTION-SCREEN BEGIN OF BLOCK blk1 WITH FRAME TITLE text-001.
PARAMETER p_file TYPE rlgrap-filename.
SELECTION-SCREEN END OF BLOCK blk1.

OPEN DATASET p_file FOR OUTPUT IN TEXT MODE ENCODING UTF-8 WITH BYTE-ORDER MARK.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  cl_gui_frontend_services=>file_open_dialog(
  EXPORTING
    default_extension = 'CSV'
    file_filter = '(*.csv)|*csv|'
    CHANGING
      file_table              = lt_filetable
      rc                      = lv_rc
  EXCEPTIONS
    file_open_dialog_failed = 1
    cntl_error              = 2
    error_no_gui            = 3
    not_supported_by_gui    = 4
    OTHERS                  = 5
  ).

  READ TABLE lt_filetable INTO lv_filetable INDEX 1.
  p_file = lv_filetable.

START-OF-SELECTION.

  lv_file = p_file.

  cl_gui_frontend_services=>gui_upload( EXPORTING filename = lv_file
                                                  has_field_separator = 'X'
                                         CHANGING data_tab = lt_file
                                       EXCEPTIONS file_open_error         = 1
                                                  file_read_error         = 2
                                                  no_batch                = 3
                                                  gui_refuse_filetransfer = 4
                                                  invalid_type            = 5
                                                  no_authority            = 6
                                                  unknown_error           = 7
                                                  bad_data_format         = 8
                                                  header_not_allowed      = 9
                                                  separator_not_allowed   = 10
                                                  header_too_long         = 11
                                                  unknown_dp_error        = 12
                                                  access_denied           = 13
                                                  dp_out_of_memory        = 14
                                                  disk_full               = 15
                                                  dp_timeout              = 16
                                                  not_supported_by_gui    = 17
                                                  error_no_gui            = 18
                                                  OTHERS                  = 19 ).
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  LOOP AT lt_file INTO ls_file.

    CALL FUNCTION 'SCP_REPLACE_STRANGE_CHARS'
      EXPORTING
        INTEXT                 = ls_file-line
     IMPORTING
       OUTTEXT                 = ls_file-line.

    SPLIT ls_file-line AT ';' INTO ls_carga-stcd1
                                   ls_carga-street
                                   ls_carga-city1
                                   ls_carga-city2
                                   ls_carga-city_code.

    APPEND ls_carga TO lt_carga.

  ENDLOOP.

  IF lt_carga[] IS INITIAL.
  MESSAGE 'Arquivo vazio.' TYPE 'S' DISPLAY LIKE 'E'.
  EXIT.
  ELSE.
  LOOP AT lt_carga[] INTO ls_carga.

  SELECT adrnr
  FROM   kna1
  INTO   lv_adrnr
  WHERE  stcd1 = ls_carga-stcd1.
  ENDSELECT.

  IF sy-subrc = 0.
    SELECT street
           city1
           city2
           city_code
    FROM   adrc
    INTO   wa_adrc
    WHERE  addrnumber = lv_adrnr.
    ENDSELECT.
    ENDIF.

"Documento antigo
  wa_final-stcd1       = ls_carga-stcd1.
  wa_final-street      = wa_adrc-street.
  wa_final-city1       = wa_adrc-city1.
  wa_final-city2       = wa_adrc-city2.
  wa_final-city_code   = wa_adrc-city_code.

 "Documento novo
  wa_final-f_stcd1     = ls_carga-stcd1.
  wa_final-f_street    = ls_carga-street.
  wa_final-f_city1     = ls_carga-city1.
  wa_final-f_city2     = ls_carga-city2.
  wa_final-f_city_code = ls_carga-city_code.

  APPEND wa_final TO ti_final.

    ENDLOOP.
  ENDIF.

  PERFORM build_fieldcatlog.
  PERFORM build_events.
  PERFORM build_layout.
  PERFORM list_display.

*&---------------------------------------------------------------------*
*&      Form  build_fieldcatlog
*&---------------------------------------------------------------------*
FORM build_fieldcatlog .
  CLEAR:w_fieldcat,i_fieldcat[].

  PERFORM build_fcatalog USING:
           'STCD1'       'KNA1' 'STCD1',
           'STREET'      'ADRC' 'STREET',
           'CITY1'       'ADRC' 'CITY1',
           'CITY2'       'ADRC' 'CITY2',
           'CITY_CODE'   'ADRC' 'CITY_CODE',
           'f_STCD1'     'KNA1' 'f_STCD1',
           'f_STREET'    'ADRC' 'f_STREET',
           'f_CITY1'     'ADRC' 'f_CITY1',
           'f_CITY2'     'ADRC' 'f_CITY2',
           'f_CITY_CODE' 'ADRC' 'f_CITY_CODE'.


ENDFORM.                    "BUILD_FIELDCATLOG
*&---------------------------------------------------------------------*
*&      Form  BUILD_FCATALOG
*&---------------------------------------------------------------------*

FORM build_fcatalog USING l_field l_tab l_text.

  w_fieldcat-fieldname      = l_field.
  w_fieldcat-tabname        = l_tab.
  w_fieldcat-seltext_m      = l_text.

  APPEND w_fieldcat TO i_fieldcat.
  CLEAR w_fieldcat.

ENDFORM.                    " build_fieldcatlog

*&---------------------------------------------------------------------*
*&      Form  build_events
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM build_events.
  CLEAR :
  w_events, i_events[].
  w_events-name = 'TOP_OF_PAGE'."Event Name
  w_events-form = 'TOP_OF_PAGE'."Callback event subroutine
  APPEND w_events TO i_events.
  CLEAR  w_events.

ENDFORM.                    "build_events
*&---------------------------------------------------------------------*
*&      Form  build_layout
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  build_layout
*&---------------------------------------------------------------------*
FORM build_layout .

  w_layout-colwidth_optimize = 'X'.
  w_layout-zebra             = 'X'.

ENDFORM.                    " build_layout
*&---------------------------------------------------------------------*
*&      Form  list_display
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  list_display
*&---------------------------------------------------------------------*
FORM list_display .
  DATA:
        l_program TYPE sy-repid.
  l_program = sy-repid.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = l_program
      is_layout                = w_layout
      it_fieldcat              = i_fieldcat
      it_events                = i_events
      i_callback_pf_status_set = 'SUB_PF_STATUS'
      i_callback_user_command  = 'USER_COMMAND'
    TABLES
      t_outtab           = ti_final
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.                    " list_display


FORM sub_pf_status USING rt_extab TYPE slis_t_extab..
  SET PF-STATUS 'ZSTANDARD'.
ENDFORM.
FORM user_command USING r_ucomm LIKE sy-ucomm
      rs_selfield TYPE slis_selfield.

IF r_ucomm EQ '&EXEC'.

    LOOP AT TI_FINAL INTO WA_FINAL.

      SELECT *
        FROM  kna1
        INTO  wa_kna1
        WHERE stcd1 EQ wa_final-stcd1.

    ENDSELECT.

    IF sy-subrc EQ 0.

    CALL FUNCTION 'ADDR_GET_COMPLETE'
 EXPORTING
   ADDRNUMBER                    = wa_kna1-adrnr
   IV_CURRENT_COMM_DATA          = 'X'
 IMPORTING
   ADDR1_COMPLETE                = wa_addr1_complete
 EXCEPTIONS
   PARAMETER_ERROR               = 1
   ADDRESS_NOT_EXIST             = 2
   INTERNAL_ERROR                = 3
   WRONG_ACCESS_TO_ARCHIVE       = 4
   ADDRESS_BLOCKED               = 5
   OTHERS                        = 6.

   IF SY-SUBRC = 0.



    LOOP AT wa_addr1_complete-addr1_tab INTO gs_addr1.

    APPEND INITIAL LINE TO t_bapiad1vl ASSIGNING <fs_t_bapiad1vl>.



    <fs_t_bapiad1vl>-STREET     = wa_final-f_street.
    <fs_t_bapiad1vl>-CITY       = wa_final-f_city1.
    <fs_t_bapiad1vl>-DISTRICT   = wa_final-f_city2.
    <fs_t_bapiad1vl>-CITY_NO    = wa_final-f_city_Code.

    APPEND INITIAL LINE TO t_bapiad1vl_x ASSIGNING <fs_t_bapiad1vlx>.
    <fs_t_bapiad1vlx>-STREET       = abap_true.
    <fs_t_bapiad1vlx>-CITY         = abap_true.
    <fs_t_bapiad1vlx>-DISTRICT     = abap_true.
    <fs_t_bapiad1vlx>-CITY_NO      = abap_true.
    <fs_t_bapiad1vlx>-updateflag   = 'U'.

    v_objty = 'KNA1'.
    v_objid = wa_kna1-kunnr.

  CALL FUNCTION 'BAPI_ADDRESSORG_CHANGE'
          EXPORTING
            obj_type       = v_objty
            obj_id         = v_objid
          IMPORTING
            address_number = wa_kna1-adrnr
          TABLES
            bapiad1vl      = t_bapiad1vl
            bapiad1vl_x    = t_bapiad1vl_x
            return         = lt_return.

      IF line_exists( lt_return[ type = 'E' ] ).
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          CONCATENATE 'Erro ao inserir/modificar cadastro: ' v_objid INTO lv_msg SEPARATED BY space.
          MESSAGE lv_msg TYPE 'I' DISPLAY LIKE 'S'.

          LOOP AT lt_return INTO DATA(s_ret).

            MESSAGE ID s_ret-id TYPE s_ret-type NUMBER s_ret-number WITH s_ret-message_v1 s_ret-message_v2 s_ret-message_v3 s_ret-message_v4 INTO lv_msg.
            WRITE: / lv_msg.

          ENDLOOP.

          DELETE t_adrc WHERE addrnumber = v_addnr.
          DELETE t_adrc WHERE addrnumber = v_addnr.

        ELSE.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.

           CLEAR wa_clientes_log.

           wa_clientes_log-uname       = sy-uname.
           wa_clientes_log-datum       = sy-datum.
           wa_clientes_log-uzeit       = sy-uzeit.

           "Dados antigos
           wa_clientes_log-stcd1       = wa_final-stcd1.
           wa_clientes_log-street      = wa_final-street.
           wa_clientes_log-city1       = wa_final-city1.
           wa_clientes_log-city2       = wa_final-city2.
           wa_clientes_log-city_code   = wa_final-city_code.

           "Novos dados
           wa_clientes_log-f_stcd1     = wa_final-f_stcd1.
           wa_clientes_log-f_street    = wa_final-f_street.
           wa_clientes_log-f_city1     = wa_final-f_city1.
           wa_clientes_log-f_city2     = wa_final-f_city2.
           wa_clientes_log-f_city_code = wa_final-f_city_code.

           MODIFY zsd_clientes_log FROM wa_clientes_log.

          CONCATENATE 'cadastro' v_objid 'inserido/modificado com sucesso.' INTO lv_msg SEPARATED BY space.
          MESSAGE lv_msg TYPE 'I' DISPLAY LIKE 'S'.

        ENDIF.

        ENDLOOP.

    ENDIF.

      ENDIF.

      ENDLOOP.

ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  top_of_page
*&---------------------------------------------------------------------*

FORM top_of_page.
  DATA :
   li_header TYPE slis_t_listheader,
   w_header  LIKE LINE OF li_header.
  DATA:
        l_date TYPE char10.
  WRITE sy-datum TO l_date.
  w_header-typ  = 'H'.
  CONCATENATE sy-repid ':' 'From Date' l_date INTO w_header-info SEPARATED BY space.
  APPEND w_header TO li_header.
  CLEAR w_header.

  w_header-typ  = 'S'.
  w_header-info = sy-title.
  APPEND w_header TO li_header.
  CLEAR w_header.

  w_header-typ  = 'A'.
  w_header-info = sy-uname.
  APPEND w_header TO li_header.
  CLEAR w_header.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary = li_header.

ENDFORM.                    "top_of_page

END-OF-SELECTION."Fim do programa
